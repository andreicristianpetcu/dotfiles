{
  "scopeName": "source.go",
  "name": "Go",
  "comment": "Go language",
  "fileTypes": [
    "go"
  ],
  "foldingStartMarker": "({|\\()\\s*$",
  "foldingStopMarker": "(}|\\))\\s*$",
  "patterns": [
    {
      "comment": "Block comments",
      "begin": "/\\*",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.go"
        }
      },
      "end": "\\*/",
      "name": "comment.block.go"
    },
    {
      "comment": "Line comments",
      "begin": "//",
      "end": "$",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.go"
        }
      },
      "name": "comment.line.double-slash.go"
    },
    {
      "comment": "Syntax error",
      "match": "\\[\\](\\s+)",
      "captures": {
        "1": {
          "name": "invalid.illegal.go"
        }
      }
    },
    {
      "comment": "Syntax error sending channels",
      "match": "\\bchan([\\t ]+)<-",
      "captures": {
        "1": {
          "name": "invalid.illegal.go"
        }
      }
    },
    {
      "comment": "Syntax error receiving channels",
      "match": "<\\-([\\t ]+)chan\\b",
      "captures": {
        "1": {
          "name": "invalid.illegal.go"
        }
      }
    },
    {
      "comment": "Function declarations",
      "match": "^(\\bfunc\\b)(\\s+(\\([^\\)]+\\)\\s+)?([\\w_][\\w_\\d]*)(?=\\())?",
      "captures": {
        "1": {
          "name": "keyword.go"
        },
        "3": {
          "patterns": [
            {
              "include": "#operators"
            },
            {
              "include": "#variables"
            }
          ]
        },
        "4": {
          "name": "entity.name.function"
        }
      }
    },
    {
      "comment": "Short variable declarations",
      "match": "([\\w_][\\w\\d_]*)(?=\\s*:=)",
      "captures": {
        "1": {
          "name": "variable.go"
        }
      }
    },
    {
      "comment": "Built-in functions",
      "match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()",
      "captures": {
        "1": {
          "name": "support.function.built-in.go"
        }
      }
    },
    {
      "comment": "Functions",
      "match": "(\\bfunc\\b)|([\\w_][\\w\\d_]*)(?=\\()",
      "captures": {
        "1": {
          "name": "keyword.go"
        },
        "2": {
          "name": "support.function.go"
        }
      }
    },
    {
      "name": "storage.type.go",
      "match": "\\b(bool|string|error|int|int8|int16|int32|int64|rune|byte|uint|uint8|uint16|uint32|uint64|uintptr|float32|float64|complex64|complex128)\\b"
    },
    {
      "name": "invalid.illegal.numeric.go",
      "match": "\\b0[0-7]*[89]\\d*\\b"
    },
    {
      "name": "constant.numeric.go",
      "match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b"
    },
    {
      "name": "constant.numeric.go",
      "match": "\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?"
    },
    {
      "name": "constant.numeric.go",
      "match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b"
    },
    {
      "name": "keyword.go",
      "match": "\\b(chan|map|func|var|const|type|struct|interface|case|default)\\b"
    },
    {
      "name": "keyword.directive.go",
      "match": "\\b(package|import)\\b"
    },
    {
      "match": "\\bpackage\\b\\s+([\\w_][\\w\\d_]*)",
      "captures": {
        "1": {
          "name": "entity.name.package.go"
        }
      }
    },
    {
      "name": "keyword.statement.go",
      "match": "\\b(defer|go|goto|return|break|continue|fallthrough)\\b"
    },
    {
      "name": "keyword.conditional.go",
      "match": "\\b(if|else|switch|select)\\b"
    },
    {
      "name": "keyword.repeat.go",
      "match": "\\b(for|range)\\b"
    },
    {
      "name": "constant.language.go",
      "match": "\\b(iota|true|false|nil)\\b"
    },
    {
      "match": "\\;",
      "name": "meta.terminator.semicolon.go"
    },
    {
      "include": "#delimiters"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#runes"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#string_escaped_char"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "delimiters": {
      "patterns": [
        {
          "match": ",",
          "name": "meta.delimiter.comma.go"
        },
        {
          "match": "\\.(?!\\.\\.)",
          "name": "meta.delimiter.period.go"
        },
        {
          "match": ":(?!=)",
          "name": "meta.delimiter.colon.go"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.go",
          "match": "(\\+|&|\\+=|&=|&&|==|!=|\\-|\\||\\-=|\\|=|\\|\\||<|<=|\\*|\\^|\\*=|\\^=|<\\-|>|>=|/|<<|/=|<<=|\\+\\+|=|:=|%|>>|%=|>>=|\\-\\-|!|\\.\\.\\.|&\\^|&\\^=)"
        },
        {
          "match": "\\{|\\}",
          "name": "meta.brace.curly.go"
        },
        {
          "match": "\\(|\\)",
          "name": "meta.brace.round.go"
        },
        {
          "match": "\\[|\\]",
          "name": "meta.brace.square.go"
        }
      ]
    },
    "runes": {
      "patterns": [
        {
          "name": "constant.other.rune.go",
          "match": "\\'(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|\\p{Any})\\'"
        },
        {
          "name": "invalid.illegal.rune.go",
          "match": "\\'.*\\'"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.go"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.go"
            }
          },
          "name": "string.quoted.double.go",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_format_verbs"
            }
          ]
        },
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.go"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.go"
            }
          },
          "name": "string.quoted.raw.go",
          "patterns": [
            {
              "include": "#string_format_verbs"
            }
          ]
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "name": "constant.character.escape.go",
          "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
        },
        {
          "name": "invalid.illegal.unknown-escape.go",
          "match": "\\\\[^0-7xuUabfnrtv\\'\"]"
        }
      ]
    },
    "string_format_verbs": {
      "patterns": [
        {
          "name": "constant.character.escape.go",
          "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.go",
          "match": "\\b[\\w_][\\w\\d_]*\\b"
        }
      ]
    }
  }
}
