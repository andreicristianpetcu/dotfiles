Object.defineProperty(exports, '__esModule', {
	value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _eventKit = require('event-kit');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _reactDomPragma = require('react-dom-pragma');

var _reactDomPragma2 = _interopRequireDefault(_reactDomPragma);

var _lazyReq = require('lazy-req');

var _lazyReq2 = _interopRequireDefault(_lazyReq);

'use babel';

var lazyReq = (0, _lazyReq2['default'])(require);
var lodash = lazyReq('lodash');
var jshint = lazyReq('jshint');
var jsxhint = lazyReq('jshint-jsx');
var cli = lazyReq('jshint/src/cli');
var loadConfig = lazyReq('./load-config');
var plugin = {};
var markersByEditorId = {};
var errorsByEditorId = {};
var subscriptionTooltips = new _eventKit.CompositeDisposable();
var _ = undefined;

var SUPPORTED_GRAMMARS = ['source.js', 'source.jsx', 'source.js.jsx'];

var jsHintStatusBar = document.createElement('span');
jsHintStatusBar.setAttribute('id', 'jshint-statusbar');
jsHintStatusBar.classList.add('inline-block');

var updateStatusText = function updateStatusText(line, character, reason) {
	jsHintStatusBar.textContent = line && character && reason ? 'JSHint ' + line + ':' + character + ' ' + reason : '';
};

var getMarkersForEditor = function getMarkersForEditor() {
	var editor = atom.workspace.getActiveTextEditor();

	if (editor && markersByEditorId[editor.id]) {
		return markersByEditorId[editor.id];
	}

	return {};
};

var getErrorsForEditor = function getErrorsForEditor() {
	var editor = atom.workspace.getActiveTextEditor();

	if (editor && errorsByEditorId[editor.id]) {
		return errorsByEditorId[editor.id];
	}

	return [];
};

var destroyMarkerAtRow = function destroyMarkerAtRow(row) {
	var editor = atom.workspace.getActiveTextEditor();

	if (markersByEditorId[editor.id] && markersByEditorId[editor.id][row]) {
		markersByEditorId[editor.id][row].destroy();
		delete markersByEditorId[editor.id][row];
	}
};

var getRowForError = function getRowForError(error) {
	// JSHint reports `line: 0` when config error
	var line = error[0].line || 1;

	var row = line - 1;

	return row;
};

var clearOldMarkers = function clearOldMarkers(errors) {
	subscriptionTooltips.dispose();

	var rows = _.map(errors, function (error) {
		return getRowForError(error);
	});

	var oldMarkers = getMarkersForEditor();
	_.each(_.keys(oldMarkers), function (row) {
		if (!_.contains(rows, row)) {
			destroyMarkerAtRow(row);
		}
	});
};

var saveMarker = function saveMarker(marker, row) {
	var editor = atom.workspace.getActiveTextEditor();

	if (!markersByEditorId[editor.id]) {
		markersByEditorId[editor.id] = {};
	}

	markersByEditorId[editor.id][row] = marker;
};

var getMarkerAtRow = function getMarkerAtRow(row) {
	var editor = atom.workspace.getActiveTextEditor();

	if (!markersByEditorId[editor.id]) {
		return null;
	}

	return markersByEditorId[editor.id][row];
};

var updateStatusbar = function updateStatusbar() {
	var statusBar = atom.views.getView(atom.workspace).querySelector('.status-bar');

	if (!statusBar) {
		return;
	}

	if (!jsHintStatusBar.parentNode) {
		statusBar.addLeftTile({ item: jsHintStatusBar });
	}

	var editor = atom.workspace.getActiveTextEditor();

	if (!editor || !errorsByEditorId[editor.id]) {
		updateStatusText();
		return;
	}

	var line = editor.getCursorBufferPosition().row + 1;
	var error = errorsByEditorId[editor.id][line] || _.first(_.compact(errorsByEditorId[editor.id]));
	error = error[0];

	updateStatusText(error.line, error.character, error.reason);
};

var getReasonsForError = function getReasonsForError(error) {
	return _.map(error, function (el) {
		return el.character + ': ' + el.reason;
	});
};

var addReasons = function addReasons(marker, error) {
	var row = getRowForError(error);
	var editorElement = atom.views.getView(atom.workspace.getActiveTextEditor());
	var reasons = '<div class="jshint-errors">' + getReasonsForError(error).join('<br>') + '</div>';
	var target = editorElement.shadowRoot.querySelectorAll('.jshint-line-number.line-number-' + row);
	var tooltip = atom.tooltips.add(target, {
		title: reasons,
		placement: 'bottom',
		delay: { show: 200 }
	});

	subscriptionTooltips.add(tooltip);
};

var displayError = function displayError(err) {
	var row = getRowForError(err);

	if (getMarkerAtRow(row)) {
		return;
	}

	var editor = atom.workspace.getActiveTextEditor();
	var marker = editor.markBufferRange([[row, 0], [row, 1]]);
	editor.decorateMarker(marker, { type: 'line', 'class': 'jshint-line' });
	editor.decorateMarker(marker, { type: 'line-number', 'class': 'jshint-line-number' });
	saveMarker(marker, row);
	addReasons(marker, err);
};

var displayErrors = function displayErrors() {
	var errors = _.compact(getErrorsForEditor());
	clearOldMarkers(errors);
	updateStatusbar();
	_.each(errors, displayError);
};

var removeMarkersForEditorId = function removeMarkersForEditorId(id) {
	if (markersByEditorId[id]) {
		delete markersByEditorId[id];
	}
};

var removeErrorsForEditorId = function removeErrorsForEditorId(id) {
	if (errorsByEditorId[id]) {
		delete errorsByEditorId[id];
	}
};

var lint = function lint() {
	var editor = atom.workspace.getActiveTextEditor();

	if (!editor) {
		return;
	}

	if (SUPPORTED_GRAMMARS.indexOf(editor.getGrammar().scopeName) === -1) {
		return;
	}

	var file = editor.getURI();

	// Hack to make JSHint look for .jshintignore in the correct dir
	// Because JSHint doesn't use its `cwd` option
	process.chdir(_path2['default'].dirname(file));

	// Remove errors and don't lint if file is ignored in .jshintignore
	if (file && cli().gather({ args: [file] }).length === 0) {
		removeErrorsForEditorId(editor.id);
		displayErrors();
		removeMarkersForEditorId(editor.id);
		return;
	}

	var config = file ? loadConfig()(file) : {};
	var linter = atom.config.get('jshint.supportLintingJsx') || atom.config.get('jshint.transformJsx') ? jsxhint().JSXHINT : jshint().JSHINT;

	if (Object.keys(config).length === 0 && atom.config.get('jshint.onlyConfig')) {
		return;
	}

	var origCode = editor.getText();
	var grammarScope = editor.getGrammar().scopeName;
	var isJsx = grammarScope === 'source.jsx' || grammarScope === 'source.js.jsx';
	var code = isJsx ? (0, _reactDomPragma2['default'])(origCode) : origCode;
	var pragmaWasAdded = code !== origCode;

	try {
		linter(code, config, config.globals);
	} catch (err) {}

	removeErrorsForEditorId(editor.id);

	// workaround the errors array sometimes containing `null`
	var errors = _.compact(linter.errors);

	if (errors.length > 0) {
		(function () {
			// aggregate same-line errors
			var ret = [];
			_.each(errors, function (el) {
				if (pragmaWasAdded) {
					el.line--;
				}

				var l = el.line;

				if (Array.isArray(ret[l])) {
					ret[l].push(el);

					ret[l] = _.sortBy(ret[l], function (el) {
						return el.character;
					});
				} else {
					ret[l] = [el];
				}
			});

			errorsByEditorId[editor.id] = ret;
		})();
	}

	displayErrors();
};

var debouncedLint = null;
var debouncedDisplayErrors = null;
var debouncedUpdateStatusbar = null;

var registerEvents = function registerEvents() {
	lint();
	var workspaceElement = atom.views.getView(atom.workspace);

	debouncedLint = debouncedLint || _.debounce(lint, 50);
	debouncedDisplayErrors = debouncedDisplayErrors || _.debounce(displayErrors, 200);
	debouncedUpdateStatusbar = debouncedUpdateStatusbar || _.debounce(updateStatusbar, 100);

	atom.workspace.observeTextEditors(function (editor) {
		var buffer = editor.getBuffer();

		editor.emitter.off('scroll-top-changed', debouncedDisplayErrors);
		editor.emitter.off('did-change-cursor-position', debouncedUpdateStatusbar);
		buffer.emitter.off('did-save did-change-modified', debouncedLint);

		if (!atom.config.get('jshint.validateOnlyOnSave')) {
			buffer.onDidChangeModified(debouncedLint);
		}

		buffer.onDidSave(debouncedLint);

		editor.onDidChangeScrollTop(debouncedDisplayErrors);
		editor.onDidChangeCursorPosition(debouncedUpdateStatusbar);
	});

	workspaceElement.addEventListener('editor:will-be-removed', function (e, editorView) {
		if (editorView && editorView.editor) {
			removeErrorsForEditorId(editorView.editor.id);
			removeMarkersForEditorId(editorView.editor.id);
		}
	});
};

var config = plugin.config = {
	onlyConfig: {
		type: 'boolean',
		'default': false,
		description: 'Disable linter if there is no config file found for the linter.'
	},
	validateOnlyOnSave: {
		type: 'boolean',
		'default': false
	},
	supportLintingJsx: {
		type: 'boolean',
		'default': false,
		title: 'Support Linting JSX'
	}
};

exports.config = config;
var activate = plugin.activate = function () {
	_ = lodash();
	registerEvents();
	atom.config.observe('jshint.onlyConfig', registerEvents);
	atom.config.observe('jshint.validateOnlyOnSave', registerEvents);
	atom.commands.add('atom-workspace', 'jshint:lint', lint);
};

exports.activate = activate;
exports['default'] = plugin;
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/andrei/dotfiles/atom/packages/jshint/index.js
