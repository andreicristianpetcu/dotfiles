var url = require('url');

module.exports = {
    config: {
        fontScale: {
            type: 'number',
            'default': 1.2,
            minimum: 0.5,
            maximum: 3
        },
        fontFamily: {
            type: 'string',
            'default': "Inconsolata, Monaco, Consolas, 'Courier New', Courier"
        }
    },
    activate: function activate() {
        atom.commands.add("atom-workspace", "git-log:show", function (event) {
            /** Check valid repository */
            var repository = Promise.all(atom.project.getDirectories().map(atom.project.repositoryForDirectory.bind(atom.project)));
            repository.then(function (repos) {
                if (repos.length > 0) {
                    var repo_list = [];
                    var name;

                    for (var i = 0; i < repos.length; i++) {
                        if (repos[i] == null) continue;
                        repos[i].repo_name = repos[i].getWorkingDirectory().match(/([^\/]*)\/*$/)[1];
                        repo_list.push(repos[i]);
                    }
                    var RepoView = require('./git-repo-list.coffee');

                    new RepoView(repo_list);
                }
            });
        });

        return atom.workspace.addOpener(function (uri, options) {
            var error, host, pathname, protocol, ref;
            try {
                ref = url.parse(uri);
                protocol = ref.protocol;
                host = ref.host;
                pathname = ref.pathname;
            } catch (_error) {
                error = _error;
                return;
            }

            if (protocol !== "git-log:") {
                return;
            }
            var GitLogView = require('./git-log-view');
            return new GitLogView(options.repo);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZHJlaS8uYXRvbS9wYWNrYWdlcy9naXQtbG9nL2xpYi9naXQtbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFekIsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNiLFVBQU0sRUFBRTtBQUNOLGlCQUFTLEVBQUU7QUFDVCxnQkFBSSxFQUFFLFFBQVE7QUFDZCx1QkFBUyxHQUFHO0FBQ1osbUJBQU8sRUFBRSxHQUFHO0FBQ1osbUJBQU8sRUFBRSxDQUFDO1NBQ1g7QUFDRCxrQkFBVSxFQUFFO0FBQ1YsZ0JBQUksRUFBRSxRQUFRO0FBQ2QsdUJBQVMsdURBQXVEO1NBQ2pFO0tBQ0Y7QUFDRCxZQUFRLEVBQUUsb0JBQVc7QUFDakIsWUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLFVBQVMsS0FBSyxFQUFFOztBQUVoRSxnQkFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLEdBQUcsQ0FDMUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RCxzQkFBVSxDQUFDLElBQUksQ0FBQyxVQUFTLEtBQUssRUFBRTtBQUM1QixvQkFBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNqQix3QkFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ25CLHdCQUFJLElBQUksQ0FBQzs7QUFFVCx5QkFBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDOUIsNEJBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFDZixTQUFTO0FBQ2IsNkJBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdFLGlDQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUM1QjtBQUNELHdCQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQzs7QUFFakQsd0JBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUMzQjthQUNKLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQzs7QUFFSCxlQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVMsR0FBRyxFQUFFLE9BQU8sRUFBRTtBQUNuRCxnQkFBSSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDO0FBQ3pDLGdCQUFJO0FBQ0EsbUJBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLHdCQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUN4QixvQkFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDaEIsd0JBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO2FBQzNCLENBQ0QsT0FBTyxNQUFNLEVBQUU7QUFDWCxxQkFBSyxHQUFHLE1BQU0sQ0FBQztBQUNmLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUcsUUFBUSxLQUFLLFVBQVUsRUFBRTtBQUN4Qix1QkFBTzthQUNWO0FBQ0QsZ0JBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzNDLG1CQUFPLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QyxDQUFDLENBQUM7S0FDTjtDQUNKLENBQUMiLCJmaWxlIjoiL2hvbWUvYW5kcmVpLy5hdG9tL3BhY2thZ2VzL2dpdC1sb2cvbGliL2dpdC1sb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmZpZzoge1xuICAgICAgZm9udFNjYWxlOiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiAxLjIsXG4gICAgICAgIG1pbmltdW06IDAuNSxcbiAgICAgICAgbWF4aW11bTogM1xuICAgICAgfSxcbiAgICAgIGZvbnRGYW1pbHk6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6IFwiSW5jb25zb2xhdGEsIE1vbmFjbywgQ29uc29sYXMsICdDb3VyaWVyIE5ldycsIENvdXJpZXJcIlxuICAgICAgfVxuICAgIH0sXG4gICAgYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBhdG9tLmNvbW1hbmRzLmFkZChcImF0b20td29ya3NwYWNlXCIsIFwiZ2l0LWxvZzpzaG93XCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAvKiogQ2hlY2sgdmFsaWQgcmVwb3NpdG9yeSAqL1xuICAgICAgICAgICAgdmFyIHJlcG9zaXRvcnkgPSBQcm9taXNlLmFsbChhdG9tLnByb2plY3QuZ2V0RGlyZWN0b3JpZXMoKS5tYXAoXG4gICAgICAgICAgICAgICAgYXRvbS5wcm9qZWN0LnJlcG9zaXRvcnlGb3JEaXJlY3RvcnkuYmluZChhdG9tLnByb2plY3QpKSk7XG4gICAgICAgICAgICByZXBvc2l0b3J5LnRoZW4oZnVuY3Rpb24ocmVwb3MpIHtcbiAgICAgICAgICAgICAgICBpZihyZXBvcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXBvX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8cmVwb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcG9zW2ldID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvc1tpXS5yZXBvX25hbWUgPSByZXBvc1tpXS5nZXRXb3JraW5nRGlyZWN0b3J5KCkubWF0Y2goLyhbXlxcL10qKVxcLyokLylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvX2xpc3QucHVzaChyZXBvc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIFJlcG9WaWV3ID0gcmVxdWlyZSgnLi9naXQtcmVwby1saXN0LmNvZmZlZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSZXBvVmlldyhyZXBvX2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2UuYWRkT3BlbmVyKGZ1bmN0aW9uKHVyaSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIGVycm9yLCBob3N0LCBwYXRobmFtZSwgcHJvdG9jb2wsIHJlZjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVmID0gdXJsLnBhcnNlKHVyaSk7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2wgPSByZWYucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgaG9zdCA9IHJlZi5ob3N0O1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcmVmLnBhdGhuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9lcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yID0gX2Vycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYocHJvdG9jb2wgIT09IFwiZ2l0LWxvZzpcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBHaXRMb2dWaWV3ID0gcmVxdWlyZSgnLi9naXQtbG9nLXZpZXcnKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgR2l0TG9nVmlldyhvcHRpb25zLnJlcG8pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuIl19