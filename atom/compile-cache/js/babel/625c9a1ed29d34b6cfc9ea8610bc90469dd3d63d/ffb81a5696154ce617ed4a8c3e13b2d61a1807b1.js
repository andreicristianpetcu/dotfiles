var $ = require('atom-space-pen-views').$;
var React = require('react-atom-fork');
var BlameListView = require('../views/blame-list-view');
var RemoteRevision = require('../util/RemoteRevision');
var errorController = require('./errorController');

/**
 * Display or hide a BlameListView for the active editor.
 *
 * If the active editor does not have an existing BlameListView, one will be
 * mounted.
 *
 * @param {Blamer} projectBlamer - a Blamer for the current project
 */
function toggleBlame(projectBlamer) {
  var editor = atom.workspace.getActiveTextEditor();
  if (!editor) return;

  // An unsaved file has no filePath
  var filePath = editor.getPath();
  if (!filePath) return;

  var editorView = atom.views.getView(editor);
  if (!editorView.blameView) {
    var remoteUrl = projectBlamer.repo.getOriginURL(filePath);
    var remoteRevision;
    try {
      remoteRevision = RemoteRevision.create(remoteUrl);
    } catch (e) {}
    // the only exception possible occurs when the template string is invalid
    // TODO refactor this to not throw an exception

    // insert the BlameListView after the gutter div
    var mountPoint = $('<div>', { 'class': 'git-blame-mount' });
    $(editorView.rootElement).find('.gutter').after(mountPoint);

    editorView.blameView = React.renderComponent(new BlameListView({
      projectBlamer: projectBlamer,
      remoteRevision: remoteRevision,
      editorView: editorView
    }), mountPoint[0]);
  } else {
    editorView.blameView.toggle();
  }
}

// EXPORTS
module.exports = {
  toggleBlame: toggleBlame
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZHJlaS8uYXRvbS9wYWNrYWdlcy9naXQtYmxhbWUvbGliL2NvbnRyb2xsZXJzL2JsYW1lVmlld0NvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQzFELElBQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3pELElBQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBV3JELFNBQVMsV0FBVyxDQUFDLGFBQWEsRUFBRTtBQUNsQyxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDbEQsTUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPOzs7QUFHcEIsTUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hDLE1BQUksQ0FBQyxRQUFRLEVBQUUsT0FBTzs7QUFFdEIsTUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7QUFDekIsUUFBSSxTQUFTLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUQsUUFBSSxjQUFjLENBQUM7QUFDbkIsUUFBSTtBQUNGLG9CQUFjLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNuRCxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBR1g7Ozs7O0FBQUEsQUFHRCxRQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFDLENBQUMsQ0FBQztBQUMxRCxLQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRTVELGNBQVUsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLGFBQWEsQ0FBQztBQUM3RCxtQkFBYSxFQUFFLGFBQWE7QUFDNUIsb0JBQWMsRUFBRSxjQUFjO0FBQzlCLGdCQUFVLEVBQUUsVUFBVTtLQUN2QixDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDcEIsTUFBTTtBQUNMLGNBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDL0I7Q0FDRjs7O0FBSUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLGFBQVcsRUFBRSxXQUFXO0NBQ3pCLENBQUMiLCJmaWxlIjoiL2hvbWUvYW5kcmVpLy5hdG9tL3BhY2thZ2VzL2dpdC1ibGFtZS9saWIvY29udHJvbGxlcnMvYmxhbWVWaWV3Q29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0ICQgPSByZXF1aXJlKCdhdG9tLXNwYWNlLXBlbi12aWV3cycpLiQ7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0LWF0b20tZm9yaycpO1xuY29uc3QgQmxhbWVMaXN0VmlldyA9IHJlcXVpcmUoJy4uL3ZpZXdzL2JsYW1lLWxpc3QtdmlldycpO1xuY29uc3QgUmVtb3RlUmV2aXNpb24gPSByZXF1aXJlKCcuLi91dGlsL1JlbW90ZVJldmlzaW9uJyk7XG5jb25zdCBlcnJvckNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2Vycm9yQ29udHJvbGxlcicpO1xuXG5cbi8qKlxuICogRGlzcGxheSBvciBoaWRlIGEgQmxhbWVMaXN0VmlldyBmb3IgdGhlIGFjdGl2ZSBlZGl0b3IuXG4gKlxuICogSWYgdGhlIGFjdGl2ZSBlZGl0b3IgZG9lcyBub3QgaGF2ZSBhbiBleGlzdGluZyBCbGFtZUxpc3RWaWV3LCBvbmUgd2lsbCBiZVxuICogbW91bnRlZC5cbiAqXG4gKiBAcGFyYW0ge0JsYW1lcn0gcHJvamVjdEJsYW1lciAtIGEgQmxhbWVyIGZvciB0aGUgY3VycmVudCBwcm9qZWN0XG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUJsYW1lKHByb2plY3RCbGFtZXIpIHtcbiAgdmFyIGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgaWYgKCFlZGl0b3IpIHJldHVybjtcblxuICAvLyBBbiB1bnNhdmVkIGZpbGUgaGFzIG5vIGZpbGVQYXRoXG4gIHZhciBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gIGlmICghZmlsZVBhdGgpIHJldHVybjtcblxuICB2YXIgZWRpdG9yVmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhlZGl0b3IpO1xuICBpZiAoIWVkaXRvclZpZXcuYmxhbWVWaWV3KSB7XG4gICAgdmFyIHJlbW90ZVVybCA9IHByb2plY3RCbGFtZXIucmVwby5nZXRPcmlnaW5VUkwoZmlsZVBhdGgpO1xuICAgIHZhciByZW1vdGVSZXZpc2lvbjtcbiAgICB0cnkge1xuICAgICAgcmVtb3RlUmV2aXNpb24gPSBSZW1vdGVSZXZpc2lvbi5jcmVhdGUocmVtb3RlVXJsKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyB0aGUgb25seSBleGNlcHRpb24gcG9zc2libGUgb2NjdXJzIHdoZW4gdGhlIHRlbXBsYXRlIHN0cmluZyBpcyBpbnZhbGlkXG4gICAgICAvLyBUT0RPIHJlZmFjdG9yIHRoaXMgdG8gbm90IHRocm93IGFuIGV4Y2VwdGlvblxuICAgIH1cblxuICAgIC8vIGluc2VydCB0aGUgQmxhbWVMaXN0VmlldyBhZnRlciB0aGUgZ3V0dGVyIGRpdlxuICAgIHZhciBtb3VudFBvaW50ID0gJCgnPGRpdj4nLCB7J2NsYXNzJzogJ2dpdC1ibGFtZS1tb3VudCd9KTtcbiAgICAkKGVkaXRvclZpZXcucm9vdEVsZW1lbnQpLmZpbmQoJy5ndXR0ZXInKS5hZnRlcihtb3VudFBvaW50KTtcblxuICAgIGVkaXRvclZpZXcuYmxhbWVWaWV3ID0gUmVhY3QucmVuZGVyQ29tcG9uZW50KG5ldyBCbGFtZUxpc3RWaWV3KHtcbiAgICAgIHByb2plY3RCbGFtZXI6IHByb2plY3RCbGFtZXIsXG4gICAgICByZW1vdGVSZXZpc2lvbjogcmVtb3RlUmV2aXNpb24sXG4gICAgICBlZGl0b3JWaWV3OiBlZGl0b3JWaWV3XG4gICAgfSksIG1vdW50UG9pbnRbMF0pO1xuICB9IGVsc2Uge1xuICAgIGVkaXRvclZpZXcuYmxhbWVWaWV3LnRvZ2dsZSgpO1xuICB9XG59XG5cblxuLy8gRVhQT1JUU1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRvZ2dsZUJsYW1lOiB0b2dnbGVCbGFtZVxufTtcbiJdfQ==