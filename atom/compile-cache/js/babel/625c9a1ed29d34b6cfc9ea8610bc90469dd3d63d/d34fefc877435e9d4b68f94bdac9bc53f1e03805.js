/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.
    if (typeof define === 'function' && define.amd) {
        define('esrefactor', ['exports', 'esprima', 'estraverse', 'escope'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('esprima'), require('estraverse'), require('escope'));
    } else {
        factory(root.esrefactor = {}, esprima, estraverse, escope);
    }
})(this, function (exports, esprima, estraverse, escope) {
    'use strict';

    function Context(code) {
        this._code = null;
        this._syntax = null;
        this._scopeManager = null;
        if (code) {
            this.setCode(code);
        }
    }

    Context.prototype.setCode = function (code) {
        this._code = null;
        this._syntax = null;
        this._scopeManager = null;
        if (typeof code === 'string') {
            this._code = code;
            this._syntax = esprima.parse(code, { range: true });
        } else if (typeof code === 'object' && code.type === 'Program') {
            if (typeof code.range !== 'object' || code.range.length !== 2) {
                throw new Error('esrefactor.Context only accepts a syntax tree with range information');
            }
            this._syntax = code;
        }
        this._scopeManager = escope.analyze(this._syntax);
    };

    function locateDeclaration(ref) {
        var node, scope, i, v;

        if (ref.resolved) {
            return ref.resolved.defs[ref.resolved.defs.length - 1].name;
        }

        scope = ref.from;
        do {
            for (i = 0; i < scope.variables.length; ++i) {
                v = scope.variables[i];
                if (v.name === ref.identifier.name && v.defs.length) {
                    return v.defs[v.defs.length - 1].name;
                }
            }
            scope = scope.upper;
        } while (scope);

        return null;
    }

    // Given the scope, look up the reference which corresponds to the identifier
    // in the specified cursor position. If possible, find also the corresponding
    // declaration for that reference.

    Context.prototype._lookup = function (scope, identifier) {
        var i, j, ref;

        for (i = 0; i < scope.references.length; ++i) {
            ref = scope.references[i];
            if (ref.identifier === identifier) {
                return {
                    identifier: identifier,
                    declaration: locateDeclaration(ref)
                };
            }
        }

        for (i = 0; i < scope.variableScope.variables.length; ++i) {
            ref = scope.variableScope.variables[i];
            for (j = 0; j < ref.identifiers.length; ++j) {
                if (ref.identifiers[j] === identifier) {
                    return {
                        identifier: identifier,
                        declaration: identifier
                    };
                }
            }
        }
    };

    // Given the cursor position, locate the identifier in that position.
    // If there is no identifier in that position, undefined will be returned.
    //
    // The returned object will have the following property:
    //    identifier: the syntax node associated with the identifier
    //   declaration: the syntax node where the identifier is declared
    //    references: an array of the references of the identifier
    //
    // Note that the references array also includes the identifier but it
    // does exclude the declaration.
    //
    // Example:
    //     var ctx = new esrefactor.Context('var x; x; x = 42');
    //     var id = ctx.identify(10);
    //
    //  id will have the value of:
    //      {
    //        identifier: {
    //          type: 'Identifier',
    //          name: 'x',
    //          range: [10, 11]
    //        },
    //        declaration: {
    //          type: 'Identifier',
    //          name: 'x',
    //          range: [4, 5]
    //        },
    //        references: [{
    //          type: 'Identifier',
    //          name: 'x',
    //          range: [7, 8]
    //        }, {
    //          type: 'Identifier',
    //          name: 'x',
    //          range: [10, 11]
    //        }]
    //      }

    Context.prototype.identify = function (pos) {
        var identifier, scopeManager, lookup, result, scope;

        if (!this._syntax) {
            throw new Error('Unable to identify anything without a syntax tree');
        }
        if (!this._scopeManager) {
            throw new Error('Unable to identify anything without a valid scope manager');
        }

        scopeManager = this._scopeManager;
        lookup = this._lookup;

        scopeManager.attach();
        estraverse.traverse(this._syntax, {
            enter: function enter(node) {
                scope = scopeManager.acquire(node) || scope;
                if (node.type === esprima.Syntax.Identifier) {
                    if (node.range[0] <= pos && node.range[1] >= pos) {
                        identifier = node;
                        return estraverse.VisitorOption.Break;
                    }
                }
            },
            leave: function leave(node) {
                scope = scopeManager.release(node) || scope;
            }
        });
        scopeManager.detach();

        if (!identifier) {
            return;
        }

        result = lookup(scope, identifier);

        if (result) {
            // Search for all other identical references (same scope).
            result.references = [];
            scopeManager.attach();
            estraverse.traverse(this._syntax, {
                enter: function enter(node) {
                    var scope, i, ref, d;
                    scope = scopeManager.acquire(node);
                    for (i = 0; i < (scope ? scope.references.length : 0); ++i) {
                        ref = scope.references[i];
                        if (ref.identifier.name === identifier.name) {
                            d = lookup(scope, ref.identifier);
                            if (d && d.declaration === result.declaration) {
                                result.references.push(ref.identifier);
                            }
                        }
                    }
                }
            });
            scopeManager.detach();
        }

        return result;
    };

    // Rename the identifier and its reference to a new specific name.
    // The return value is the new code after the identifier is renamed.
    //
    // This functions needs identification, which is obtain using identify() function.
    //
    // Example:
    //   var ctx = new esrefactor.Context('var x; x = 42');
    //   var id = ctx.identify(4);
    //   var code = ctx.rename(id, 'y');
    //
    // code will be `var y; y = 42'.

    Context.prototype.rename = function (identification, name) {
        var result, list, set, i, id, entry;

        if (!this._code) {
            throw new Error('Unable to rename without the original source');
        }

        result = this._code;
        if (typeof identification === 'undefined') {
            return result;
        }

        list = [identification.identifier.range];
        if (identification.declaration) {
            list.push(identification.declaration.range);
        }
        for (i = 0; i < identification.references.length; ++i) {
            list.push(identification.references[i].range);
        }

        // Sort the references based on the position to prevent
        // shifting all the ranges.
        list.sort(function (a, b) {
            return b[0] - a[0];
        });

        // Prevent double renaming, get the unique set.
        set = [];
        set.push(list[0]);
        for (i = 1; i < list.length; ++i) {
            if (list[i][0] !== list[i - 1][0]) {
                set.push(list[i]);
            }
        }

        id = identification.identifier.name;
        for (i = 0; i < set.length; ++i) {
            result = result.slice(0, set[i][0]) + name + result.slice(set[i][1]);
        }

        return result;
    };

    exports.Context = Context;
});
/*global esprima:true, estraverse:true, escope: true,
 define:true, require:true, exports:true */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuZHJlaS8uYXRvbS9wYWNrYWdlcy9qcy1yZWZhY3Rvci92ZW5kZXIvZXNyZWZhY3Rvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBLEFBQUMsQ0FBQSxVQUFVLElBQUksRUFBRSxPQUFPLEVBQUU7QUFDdEIsZ0JBQVksQ0FBQzs7OztBQUliLFFBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7QUFDNUMsY0FBTSxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2pGLE1BQU0sSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXLEVBQUU7QUFDdkMsZUFBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ2xGLE1BQU07QUFDSCxlQUFPLENBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLEVBQUcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNoRTtDQUNKLENBQUEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7QUFDcEQsZ0JBQVksQ0FBQzs7QUFFYixhQUFTLE9BQU8sQ0FBQyxJQUFJLEVBQUU7QUFDbkIsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsWUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDcEIsWUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7QUFDMUIsWUFBSSxJQUFJLEVBQUU7QUFDTixnQkFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0QjtLQUNKOztBQUVELFdBQU8sQ0FB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QUFFRixXQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztDQUM3QixDQUFDLENBQUUiLCJmaWxlIjoiL2hvbWUvYW5kcmVpLy5hdG9tL3BhY2thZ2VzL2pzLXJlZmFjdG9yL3ZlbmRlci9lc3JlZmFjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgQ29weXJpZ2h0IChDKSAyMDEzIEFyaXlhIEhpZGF5YXQgPGFyaXlhLmhpZGF5YXRAZ21haWwuY29tPlxuICBDb3B5cmlnaHQgKEMpIDIwMTIgQXJpeWEgSGlkYXlhdCA8YXJpeWEuaGlkYXlhdEBnbWFpbC5jb20+XG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXG4gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLypnbG9iYWwgZXNwcmltYTp0cnVlLCBlc3RyYXZlcnNlOnRydWUsIGVzY29wZTogdHJ1ZSxcbiBkZWZpbmU6dHJ1ZSwgcmVxdWlyZTp0cnVlLCBleHBvcnRzOnRydWUgKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uIChVTUQpIHRvIHN1cHBvcnQgQU1ELCBDb21tb25KUy9Ob2RlLmpzLFxuICAgIC8vIFJoaW5vLCBhbmQgcGxhaW4gYnJvd3NlciBsb2FkaW5nLlxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdlc3JlZmFjdG9yJywgWydleHBvcnRzJywgJ2VzcHJpbWEnLCAnZXN0cmF2ZXJzZScsICdlc2NvcGUnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdlc3ByaW1hJyksIHJlcXVpcmUoJ2VzdHJhdmVyc2UnKSwgcmVxdWlyZSgnZXNjb3BlJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoKHJvb3QuZXNyZWZhY3RvciA9IHt9KSwgZXNwcmltYSwgZXN0cmF2ZXJzZSwgZXNjb3BlKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBlc3ByaW1hLCBlc3RyYXZlcnNlLCBlc2NvcGUpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBDb250ZXh0KGNvZGUpIHtcbiAgICAgICAgdGhpcy5fY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N5bnRheCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Njb3BlTWFuYWdlciA9IG51bGw7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvZGUoY29kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb250ZXh0LnByb3RvdHlwZS5zZXRDb2RlID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdGhpcy5fY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N5bnRheCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Njb3BlTWFuYWdlciA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvZGUgPSBjb2RlO1xuICAgICAgICAgICAgdGhpcy5fc3ludGF4ID0gZXNwcmltYS5wYXJzZShjb2RlLCB7IHJhbmdlOiB0cnVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlID09PSAnb2JqZWN0JyAmJiBjb2RlLnR5cGUgPT09ICdQcm9ncmFtJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlLnJhbmdlICE9PSAnb2JqZWN0JyB8fCBjb2RlLnJhbmdlLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXNyZWZhY3Rvci5Db250ZXh0IG9ubHkgYWNjZXB0cyBhIHN5bnRheCB0cmVlIHdpdGggcmFuZ2UgaW5mb3JtYXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N5bnRheCA9IGNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2NvcGVNYW5hZ2VyID0gZXNjb3BlLmFuYWx5emUodGhpcy5fc3ludGF4KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYXRlRGVjbGFyYXRpb24ocmVmKSB7XG4gICAgICAgIHZhciBub2RlLCBzY29wZSwgaSwgdjtcblxuICAgICAgICBpZiAocmVmLnJlc29sdmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmLnJlc29sdmVkLmRlZnNbcmVmLnJlc29sdmVkLmRlZnMubGVuZ3RoIC0gMV0ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlID0gcmVmLmZyb207XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzY29wZS52YXJpYWJsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2ID0gc2NvcGUudmFyaWFibGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh2Lm5hbWUgPT09IHJlZi5pZGVudGlmaWVyLm5hbWUgJiYgdi5kZWZzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi5kZWZzW3YuZGVmcy5sZW5ndGggLSAxXS5uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjb3BlID0gc2NvcGUudXBwZXI7XG4gICAgICAgIH0gd2hpbGUgKHNjb3BlKTtcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBHaXZlbiB0aGUgc2NvcGUsIGxvb2sgdXAgdGhlIHJlZmVyZW5jZSB3aGljaCBjb3JyZXNwb25kcyB0byB0aGUgaWRlbnRpZmllclxuICAgIC8vIGluIHRoZSBzcGVjaWZpZWQgY3Vyc29yIHBvc2l0aW9uLiBJZiBwb3NzaWJsZSwgZmluZCBhbHNvIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gZGVjbGFyYXRpb24gZm9yIHRoYXQgcmVmZXJlbmNlLlxuXG4gICAgQ29udGV4dC5wcm90b3R5cGUuX2xvb2t1cCA9IGZ1bmN0aW9uIChzY29wZSwgaWRlbnRpZmllcikge1xuICAgICAgICB2YXIgaSwgaiwgcmVmO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzY29wZS5yZWZlcmVuY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZWYgPSBzY29wZS5yZWZlcmVuY2VzW2ldO1xuICAgICAgICAgICAgaWYgKHJlZi5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb246IGxvY2F0ZURlY2xhcmF0aW9uKHJlZilcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNjb3BlLnZhcmlhYmxlU2NvcGUudmFyaWFibGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZWYgPSBzY29wZS52YXJpYWJsZVNjb3BlLnZhcmlhYmxlc1tpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCByZWYuaWRlbnRpZmllcnMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAocmVmLmlkZW50aWZpZXJzW2pdID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb246IGlkZW50aWZpZXJcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAvLyBHaXZlbiB0aGUgY3Vyc29yIHBvc2l0aW9uLCBsb2NhdGUgdGhlIGlkZW50aWZpZXIgaW4gdGhhdCBwb3NpdGlvbi5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBpZGVudGlmaWVyIGluIHRoYXQgcG9zaXRpb24sIHVuZGVmaW5lZCB3aWxsIGJlIHJldHVybmVkLlxuICAgIC8vXG4gICAgLy8gVGhlIHJldHVybmVkIG9iamVjdCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0eTpcbiAgICAvLyAgICBpZGVudGlmaWVyOiB0aGUgc3ludGF4IG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBpZGVudGlmaWVyXG4gICAgLy8gICBkZWNsYXJhdGlvbjogdGhlIHN5bnRheCBub2RlIHdoZXJlIHRoZSBpZGVudGlmaWVyIGlzIGRlY2xhcmVkXG4gICAgLy8gICAgcmVmZXJlbmNlczogYW4gYXJyYXkgb2YgdGhlIHJlZmVyZW5jZXMgb2YgdGhlIGlkZW50aWZpZXJcbiAgICAvL1xuICAgIC8vIE5vdGUgdGhhdCB0aGUgcmVmZXJlbmNlcyBhcnJheSBhbHNvIGluY2x1ZGVzIHRoZSBpZGVudGlmaWVyIGJ1dCBpdFxuICAgIC8vIGRvZXMgZXhjbHVkZSB0aGUgZGVjbGFyYXRpb24uXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vICAgICB2YXIgY3R4ID0gbmV3IGVzcmVmYWN0b3IuQ29udGV4dCgndmFyIHg7IHg7IHggPSA0MicpO1xuICAgIC8vICAgICB2YXIgaWQgPSBjdHguaWRlbnRpZnkoMTApO1xuICAgIC8vXG4gICAgLy8gIGlkIHdpbGwgaGF2ZSB0aGUgdmFsdWUgb2Y6XG4gICAgLy8gICAgICB7XG4gICAgLy8gICAgICAgIGlkZW50aWZpZXI6IHtcbiAgICAvLyAgICAgICAgICB0eXBlOiAnSWRlbnRpZmllcicsXG4gICAgLy8gICAgICAgICAgbmFtZTogJ3gnLFxuICAgIC8vICAgICAgICAgIHJhbmdlOiBbMTAsIDExXVxuICAgIC8vICAgICAgICB9LFxuICAgIC8vICAgICAgICBkZWNsYXJhdGlvbjoge1xuICAgIC8vICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAvLyAgICAgICAgICBuYW1lOiAneCcsXG4gICAgLy8gICAgICAgICAgcmFuZ2U6IFs0LCA1XVxuICAgIC8vICAgICAgICB9LFxuICAgIC8vICAgICAgICByZWZlcmVuY2VzOiBbe1xuICAgIC8vICAgICAgICAgIHR5cGU6ICdJZGVudGlmaWVyJyxcbiAgICAvLyAgICAgICAgICBuYW1lOiAneCcsXG4gICAgLy8gICAgICAgICAgcmFuZ2U6IFs3LCA4XVxuICAgIC8vICAgICAgICB9LCB7XG4gICAgLy8gICAgICAgICAgdHlwZTogJ0lkZW50aWZpZXInLFxuICAgIC8vICAgICAgICAgIG5hbWU6ICd4JyxcbiAgICAvLyAgICAgICAgICByYW5nZTogWzEwLCAxMV1cbiAgICAvLyAgICAgICAgfV1cbiAgICAvLyAgICAgIH1cblxuICAgIENvbnRleHQucHJvdG90eXBlLmlkZW50aWZ5ID0gZnVuY3Rpb24gKHBvcykge1xuICAgICAgICB2YXIgaWRlbnRpZmllciwgc2NvcGVNYW5hZ2VyLCBsb29rdXAsIHJlc3VsdCwgc2NvcGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zeW50YXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGlkZW50aWZ5IGFueXRoaW5nIHdpdGhvdXQgYSBzeW50YXggdHJlZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fc2NvcGVNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBpZGVudGlmeSBhbnl0aGluZyB3aXRob3V0IGEgdmFsaWQgc2NvcGUgbWFuYWdlcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGVNYW5hZ2VyID0gdGhpcy5fc2NvcGVNYW5hZ2VyO1xuICAgICAgICBsb29rdXAgPSB0aGlzLl9sb29rdXA7XG5cbiAgICAgICAgc2NvcGVNYW5hZ2VyLmF0dGFjaCgpO1xuICAgICAgICBlc3RyYXZlcnNlLnRyYXZlcnNlKHRoaXMuX3N5bnRheCwge1xuICAgICAgICAgICAgZW50ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUgPSBzY29wZU1hbmFnZXIuYWNxdWlyZShub2RlKSB8fCBzY29wZTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSBlc3ByaW1hLlN5bnRheC5JZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnJhbmdlWzBdIDw9IHBvcyAmJiBub2RlLnJhbmdlWzFdID49IHBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllciA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXN0cmF2ZXJzZS5WaXNpdG9yT3B0aW9uLkJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlYXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlID0gc2NvcGVNYW5hZ2VyLnJlbGVhc2Uobm9kZSkgfHwgc2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzY29wZU1hbmFnZXIuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBsb29rdXAoc2NvcGUsIGlkZW50aWZpZXIpO1xuXG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgYWxsIG90aGVyIGlkZW50aWNhbCByZWZlcmVuY2VzIChzYW1lIHNjb3BlKS5cbiAgICAgICAgICAgIHJlc3VsdC5yZWZlcmVuY2VzID0gW107XG4gICAgICAgICAgICBzY29wZU1hbmFnZXIuYXR0YWNoKCk7XG4gICAgICAgICAgICBlc3RyYXZlcnNlLnRyYXZlcnNlKHRoaXMuX3N5bnRheCwge1xuICAgICAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NvcGUsIGksIHJlZiwgZDtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUgPSBzY29wZU1hbmFnZXIuYWNxdWlyZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IChzY29wZSA/IHNjb3BlLnJlZmVyZW5jZXMubGVuZ3RoIDogMCk7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmID0gc2NvcGUucmVmZXJlbmNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWYuaWRlbnRpZmllci5uYW1lID09PSBpZGVudGlmaWVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gbG9va3VwKHNjb3BlLCByZWYuaWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgJiYgZC5kZWNsYXJhdGlvbiA9PT0gcmVzdWx0LmRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZWZlcmVuY2VzLnB1c2gocmVmLmlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGVNYW5hZ2VyLmRldGFjaCgpO1xuICAgICAgICB9XG5cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBSZW5hbWUgdGhlIGlkZW50aWZpZXIgYW5kIGl0cyByZWZlcmVuY2UgdG8gYSBuZXcgc3BlY2lmaWMgbmFtZS5cbiAgICAvLyBUaGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBuZXcgY29kZSBhZnRlciB0aGUgaWRlbnRpZmllciBpcyByZW5hbWVkLlxuICAgIC8vXG4gICAgLy8gVGhpcyBmdW5jdGlvbnMgbmVlZHMgaWRlbnRpZmljYXRpb24sIHdoaWNoIGlzIG9idGFpbiB1c2luZyBpZGVudGlmeSgpIGZ1bmN0aW9uLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvLyAgIHZhciBjdHggPSBuZXcgZXNyZWZhY3Rvci5Db250ZXh0KCd2YXIgeDsgeCA9IDQyJyk7XG4gICAgLy8gICB2YXIgaWQgPSBjdHguaWRlbnRpZnkoNCk7XG4gICAgLy8gICB2YXIgY29kZSA9IGN0eC5yZW5hbWUoaWQsICd5Jyk7XG4gICAgLy9cbiAgICAvLyBjb2RlIHdpbGwgYmUgYHZhciB5OyB5ID0gNDInLlxuXG4gICAgQ29udGV4dC5wcm90b3R5cGUucmVuYW1lID0gZnVuY3Rpb24gKGlkZW50aWZpY2F0aW9uLCBuYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQsIGxpc3QsIHNldCwgaSwgaWQsIGVudHJ5O1xuXG4gICAgICAgIGlmICghdGhpcy5fY29kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVuYW1lIHdpdGhvdXQgdGhlIG9yaWdpbmFsIHNvdXJjZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fY29kZTtcbiAgICAgICAgaWYgKHR5cGVvZiBpZGVudGlmaWNhdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0ID0gW2lkZW50aWZpY2F0aW9uLmlkZW50aWZpZXIucmFuZ2VdO1xuICAgICAgICBpZiAoaWRlbnRpZmljYXRpb24uZGVjbGFyYXRpb24pIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChpZGVudGlmaWNhdGlvbi5kZWNsYXJhdGlvbi5yYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGlkZW50aWZpY2F0aW9uLnJlZmVyZW5jZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChpZGVudGlmaWNhdGlvbi5yZWZlcmVuY2VzW2ldLnJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgdGhlIHJlZmVyZW5jZXMgYmFzZWQgb24gdGhlIHBvc2l0aW9uIHRvIHByZXZlbnRcbiAgICAgICAgLy8gc2hpZnRpbmcgYWxsIHRoZSByYW5nZXMuXG4gICAgICAgIGxpc3Quc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYlswXSAtIGFbMF07IH0pO1xuXG4gICAgICAgIC8vIFByZXZlbnQgZG91YmxlIHJlbmFtaW5nLCBnZXQgdGhlIHVuaXF1ZSBzZXQuXG4gICAgICAgIHNldCA9IFtdO1xuICAgICAgICBzZXQucHVzaChsaXN0WzBdKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChsaXN0W2ldWzBdICE9PSBsaXN0W2kgLSAxXVswXSkge1xuICAgICAgICAgICAgICAgIHNldC5wdXNoKGxpc3RbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWQgPSBpZGVudGlmaWNhdGlvbi5pZGVudGlmaWVyLm5hbWU7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBzZXRbaV1bMF0pICsgbmFtZSArIHJlc3VsdC5zbGljZShzZXRbaV1bMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgZXhwb3J0cy5Db250ZXh0ID0gQ29udGV4dDtcbn0pKTtcbiJdfQ==