{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":64,"width":1920,"height":1016,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/andrei/Dev/riweb"],"buffers":[{"text":"'use strict';\n\nangular.module('riwebApp')\n    .service('RipplePeersService', function (RippleRemoteService) {\n        var peersInfo = {\n            peers: []\n        };\n        return {\n            refreshPeers: function (callback) {\n                RippleRemoteService.onRemotePresent(function (remote) {\n                    remote.requestPeers(function (error, info) {\n                        if(info && info.peers){\n                            peersInfo.peers = info.peers;\n                        } else {\n                            peersInfo.peers = undefined;\n                        }\n                        if(callback){\n                            callback(peersInfo);\n                        }\n                    });\n                });\n            },\n            peersInfo: peersInfo\n        };\n    });\n","markerStore":{"nextMarkerId":17,"markersById":{"0":{"range":{"start":{"row":19,"column":23},"end":{"row":19,"column":23}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"7":{"range":{"start":{"row":2,"column":25},"end":{"row":2,"column":26}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"8":{"range":{"start":{"row":2,"column":14},"end":{"row":2,"column":15}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"9":{"range":{"start":{"row":2,"column":25},"end":{"row":2,"column":26}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"10":{"range":{"start":{"row":2,"column":14},"end":{"row":2,"column":15}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":4,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d790768233024fb6762216653766ba0151d5ff28","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nangular.module('riwebApp')\n    .service('RippleWalletService', function (Wallet, RippleRemoteService, RippleAccountService, TrustLineService,\n                                              Auth, RIPPLE_ROOT_ACCOUNT) {\n\n        var walletInfo = {\n            wallet: {}\n        };\n\n        var theRemote;\n        var currentUser = Auth.getCurrentUser();\n\n        function showTransactionResultMessage(err) {\n            if (err) {\n                swal('Error', 'Failed to set the DefaultRipple flag on the cold wallet account: ' + err.message, 'error');\n            }\n            else {\n                swal('Info', 'Set the DefaultRipple flag on the cold wallet account', 'info');\n            }\n        }\n\n        function getCurrentUserWallet(callback){\n            currentUser = Auth.getCurrentUser();\n            Wallet.getByOwnerEmail({ownerEmail: currentUser.email}).$promise.then(function(data){\n                if(data.length >= 1){\n                    walletInfo.wallet = data[0];\n                } else {\n                    walletInfo.wallet = {};\n                }\n                callback(data);\n            });\n        }\n\n        function setAccountFlagsForAdmin(err, flags) {\n            if (err) {\n                swal('Error', 'There was an error communicating with the server: ' + err.message, 'error');\n            }\n            else {\n                /*jshint bitwise: false*/\n                if (!(flags & 0x00800000)) {\n                    // OK, let's set the DefaultRipple flag if it's not there\n                    theRemote.setSecret(RIPPLE_ROOT_ACCOUNT.address, RIPPLE_ROOT_ACCOUNT.secret);\n\n                    var transaction = theRemote.createTransaction('AccountSet', {\n                        account: RIPPLE_ROOT_ACCOUNT.address,\n                        set: 'DefaultRipple'\n                    });\n\n                    transaction.submit(showTransactionResultMessage);\n\n                } else {\n                    console.log('The admin account wallet has the DefaultRipple flag active, flags are: ' + flags);\n                }\n            }\n        }\n\n        function checkColdWalletFlagsWithRemote(remote) {\n            theRemote = remote;\n\n            var reqOptions = {\n                account: RIPPLE_ROOT_ACCOUNT.address,\n                ledger: 'validated'\n            };\n\n            theRemote.requestAccountFlags(reqOptions, setAccountFlagsForAdmin);\n        }\n\n        function checkColdWalletFlags() {\n            RippleRemoteService.onRemotePresent(checkColdWalletFlagsWithRemote);\n        }\n\n        function loadCurrentUserBalance(callback) {\n            RippleAccountService.resetAccount();\n            if (Auth.getCurrentUser().email) {\n\n                getCurrentUserWallet(function (data) {\n                    if (data.length >= 1) {\n                        walletInfo.wallet = data[0];\n                        RippleAccountService.loadBalance(walletInfo.wallet.publicKey, callback);\n                    } else {\n                        createWallet();\n                    }\n                });\n            }\n        }\n\n        function saveWallet(newWallet) {\n            Wallet.save(newWallet,\n                function () {\n                    walletInfo.wallet = newWallet;\n                    makeInitialXRPTransfer(newWallet.publicKey);\n                },\n                function () {\n                    walletInfo.wallet = {};\n                    swal('Error', 'Sorry there was a problem processing your request!', 'error');\n                });\n        }\n\n        function buildNewInitialXRPTransaction(destinationAddress) {\n            return theRemote.createTransaction('Payment', {\n                account: RIPPLE_ROOT_ACCOUNT.address,\n                destination: destinationAddress,\n                amount: 300000000\n            });\n        }\n\n        function makeInitialXRPTransfer(destinationAddress) {\n            //do not send money to self\n            if (destinationAddress !== RIPPLE_ROOT_ACCOUNT.address) {\n                RippleRemoteService.onRemotePresent(function (remote) {\n                    theRemote = remote;\n                    theRemote.setSecret(RIPPLE_ROOT_ACCOUNT.address, RIPPLE_ROOT_ACCOUNT.secret);\n\n                    var transaction = buildNewInitialXRPTransaction(destinationAddress);\n\n                    transaction.submit(function (err) {\n                        if (!err) {\n                            var makeInitialTrustLines = TrustLineService.buildMakeInitialTrustLines(walletInfo, remote);\n                            makeInitialTrustLines(destinationAddress);\n                        } else {\n                            swal('Error', 'Sorry there was a problem processing your request! ' + err.message, 'error');\n                        }\n                    });\n                });\n            } else {\n                loadCurrentUserBalance();\n            }\n        }\n\n        function generateNewWallet() {\n            var newWallet = {};\n            newWallet.ownerEmail = currentUser.email;\n            // generate new wallet\n            var wallet = ripple.Wallet.generate();\n            newWallet.publicKey = wallet.address;\n            newWallet.passphrase = wallet.secret;\n            saveWallet(newWallet);\n        }\n\n        function reuseAdminWallet() {\n            var newWallet = {};\n            newWallet.ownerEmail = currentUser.email;\n            //reuse existing known wallet\n            newWallet.publicKey = RIPPLE_ROOT_ACCOUNT.address;\n            newWallet.passphrase = RIPPLE_ROOT_ACCOUNT.secret;\n            saveWallet(newWallet);\n            checkColdWalletFlags();\n        }\n\n        function generateWalletIfMissing(existingWalletFound) {\n            if (existingWalletFound.length < 1) {\n                if (currentUser.role === 'admin') {\n                    reuseAdminWallet();\n                } else {\n                    generateNewWallet();\n                }\n            }\n        }\n\n        function createWallet() {\n            console.log('Creating wallet');\n            if (currentUser) {\n                if (currentUser.email !== walletInfo.makingWalletForEmail) {\n                    walletInfo.makingWalletForEmail = currentUser.email;\n                    getCurrentUserWallet(generateWalletIfMissing);\n                }\n            }\n        }\n\n        return {\n            getCurrentUserWallet: getCurrentUserWallet,\n            createWallet: createWallet,\n            loadCurrentUserBalance: loadCurrentUserBalance,\n            walletInfo: walletInfo\n        };\n    });\n","markerStore":{"nextMarkerId":15,"markersById":{"0":{"range":{"start":{"row":11,"column":48},"end":{"row":11,"column":48}},"properties":{"type":"selection","editorId":26,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":{"start":{"row":13,"column":51},"end":{"row":13,"column":52}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true},"2":{"range":{"start":{"row":20,"column":8},"end":{"row":20,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"65f25e9bf55e61e427490c867006cb0d06a4107b","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":26,"softTabs":true,"displayBuffer":{"id":27,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js":1440527937078,"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js":1436394956468},"metrics":{"sessionLength":256702},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/andrei/Dev/riweb":{"isExpanded":false,"entries":{}}},"selectedPath":"/home/andrei/Dev/riweb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"symbol-gen":{},"keybinding-resolver":{}}}