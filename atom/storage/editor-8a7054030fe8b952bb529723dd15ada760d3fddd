{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":64,"width":1920,"height":1016,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/andrei/Dev/riweb"],"buffers":[{"text":"riwebApp\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^angular.module('riwebApp')$/;\"\tmodule\tline:3\nRipplePeersService\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^    .service('RipplePeersService', function (RippleRemoteService) {$/;\"\tservice\tline:4\npeersInfo\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^        var peersInfo = {$/;\"\tobject\tline:5\npeersInfo\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^        var peersInfo = {$/;\"\tvariable\tline:5\npeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^            peers: []$/;\"\tarray\tline:6\npeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^            peers: []$/;\"\tvariable\tline:6\nrefreshPeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^            refreshPeers: function (callback) {$/;\"\tfunction\tline:10\nrefreshPeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^            refreshPeers: function (callback) {$/;\"\tvariable\tline:10\npeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^                            peersInfo.peers = info.peers;$/;\"\tvariable\tline:14\npeers\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^                            peersInfo.peers = undefined;$/;\"\tvariable\tline:16\npeersInfo\t/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js\t/^            peersInfo: peersInfo$/;\"\tvariable\tline:24\nriwebApp\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^angular.module('riwebApp')$/;\"\tmodule\tline:3\nMyaccountCtrl\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^    .controller('MyaccountCtrl', function ($scope, $rootScope, Auth, User, Wallet,$/;\"\tcontroller\tline:4\n$rootScope\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^    .controller('MyaccountCtrl', function ($scope, $rootScope, Auth, User, Wallet,$/;\"\tvariable\tline:4\nRippleRemoteService\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        RippleRemoteService, FormattingService, RipplePeersService,$/;\"\tvariable\tline:5\nRippleAccountService\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        RippleAccountService, RippleWalletService, RippleTransactionService) {$/;\"\tvariable\tline:6\namountToTransfer\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.amountToTransfer = 100;$/;\"\tnumber\tline:13\namountToTransfer\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.amountToTransfer = 100;$/;\"\tvariable\tline:13\ngetMyAccountUser\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.getMyAccountUser = Auth.getCurrentUser;$/;\"\tvariable\tline:15\ngetAmountDisplayText\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.getAmountDisplayText = FormattingService.getAmountDisplayText;$/;\"\tvariable\tline:16\ntransferMoney\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.transferMoney = function () {$/;\"\tfunction\tline:18\ntransferMoney\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.transferMoney = function () {$/;\"\tvariable\tline:18\nserverInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.serverInfo = RippleRemoteService.serverInfo;$/;\"\tvariable\tline:22\npeersInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.peersInfo = RipplePeersService.peersInfo;$/;\"\tvariable\tline:23\naccountInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.accountInfo = RippleAccountService.accountInfo;$/;\"\tvariable\tline:24\nwalletInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.walletInfo = RippleWalletService.walletInfo;$/;\"\tvariable\tline:25\nloadCurrentUserBalance\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        var loadCurrentUserBalance = RippleWalletService.loadCurrentUserBalance;$/;\"\tvariable\tline:27\nrefreshPeers\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        var refreshPeers = RipplePeersService.refreshPeers;$/;\"\tvariable\tline:28\nrefreshAngular\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        function refreshAngular() {$/;\"\tfunction\tline:30\nrefreshCurrentUserWallet\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        function refreshCurrentUserWallet() {$/;\"\tfunction\tline:38\non('currentUser'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.$on('currentUser', function () {$/;\"\tonEvent\tline:47\non('ledger_closed'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^            remote.on('ledger_closed', function () {$/;\"\tonEvent\tline:54\non('transactions'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^            remote.on('transactions', function () {$/;\"\tonEvent\tline:59\n","markerStore":{"nextMarkerId":60,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":268,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/.tags","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"c2a2b9a9609f960589efe4bb32ff0f8049b4c338","deserializer":"TextBuffer","version":2},{"text":"!_TAG_FILE_FORMAT\t2\t/extended format; --format=1 will not append ;\" to lines/\n!_TAG_FILE_SORTED\t0\t/0=unsorted, 1=sorted, 2=foldcase/\n!_TAG_PROGRAM_AUTHOR\tDarren Hiebert\t/dhiebert@users.sourceforge.net/\n!_TAG_PROGRAM_NAME\tExuberant Ctags\t//\n!_TAG_PROGRAM_URL\thttp://ctags.sourceforge.net\t/official site/\n!_TAG_PROGRAM_VERSION\t5.9~svn20110310\t//\nriwebApp\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^angular.module('riwebApp')$/;\"\tmodule\tline:3\nMyaccountCtrl\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^    .controller('MyaccountCtrl', function ($scope, $rootScope, Auth, User, Wallet,$/;\"\tcontroller\tline:4\n$rootScope\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^    .controller('MyaccountCtrl', function ($scope, $rootScope, Auth, User, Wallet,$/;\"\tvariable\tline:4\nRippleRemoteService\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        RippleRemoteService, FormattingService, RipplePeersService,$/;\"\tvariable\tline:5\nRippleAccountService\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        RippleAccountService, RippleWalletService, RippleTransactionService) {$/;\"\tvariable\tline:6\namountToTransfer\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.amountToTransfer = 100;$/;\"\tnumber\tline:13\namountToTransfer\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.amountToTransfer = 100;$/;\"\tvariable\tline:13\ngetMyAccountUser\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.getMyAccountUser = Auth.getCurrentUser;$/;\"\tvariable\tline:15\ngetAmountDisplayText\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.getAmountDisplayText = FormattingService.getAmountDisplayText;$/;\"\tvariable\tline:16\ntransferMoney\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.transferMoney = function () {$/;\"\tfunction\tline:18\ntransferMoney\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.transferMoney = function () {$/;\"\tvariable\tline:18\nserverInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.serverInfo = RippleRemoteService.serverInfo;$/;\"\tvariable\tline:22\npeersInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.peersInfo = RipplePeersService.peersInfo;$/;\"\tvariable\tline:23\naccountInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.accountInfo = RippleAccountService.accountInfo;$/;\"\tvariable\tline:24\nwalletInfo\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.walletInfo = RippleWalletService.walletInfo;$/;\"\tvariable\tline:25\nloadCurrentUserBalance\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        var loadCurrentUserBalance = RippleWalletService.loadCurrentUserBalance;$/;\"\tvariable\tline:27\nrefreshPeers\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        var refreshPeers = RipplePeersService.refreshPeers;$/;\"\tvariable\tline:28\nrefreshAngular\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        function refreshAngular() {$/;\"\tfunction\tline:30\nrefreshCurrentUserWallet\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        function refreshCurrentUserWallet() {$/;\"\tfunction\tline:38\non('currentUser'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^        $scope.$on('currentUser', function () {$/;\"\tonEvent\tline:47\non('ledger_closed'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^            remote.on('ledger_closed', function () {$/;\"\tonEvent\tline:54\non('transactions'\t/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js\t/^            remote.on('transactions', function () {$/;\"\tonEvent\tline:59\n","markerStore":{"nextMarkerId":152,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":272,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/.tags1","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"ecfe833360e4c94308500427c31778381471cbce","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nangular.module('riwebApp')\n  .service('RipplePeersService', function(RippleRemoteService) {\n    var peersInfo = {\n      peers: []\n    };\n\n    return {\n      refreshPeers: function(callback) {\n        RippleRemoteService.onRemotePresent(function(remote) {\n          remote.requestPeers(function(error, info) {\n            if (info && info.peers) {\n              peersInfo.peers = info.peers;\n            } else {\n              peersInfo.peers = undefined;\n            }\n            if (callback) {\n              callback(peersInfo);\n            }\n          });\n        });\n      },\n      peersInfo: peersInfo\n    };\n  });\n","markerStore":{"nextMarkerId":3,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":276,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":{"start":{"row":3,"column":0},"end":{"row":26,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5de8bba294afabef90f63a2d454144397eaa405e","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nangular.module('riwebApp')\n    .service('RippleWalletService', function (RippleAccountService,\n        Auth, socket, $log) {\n\n        var walletInfo = {\n            wallet: {}\n        };\n\n        var theNewuser = Auth.getCurrentUser();\n\n        function getCurrentUserWallet(callback) {\n            theNewuser = Auth.getCurrentUser();\n\n            if (!theNewuser.email) {\n                return; // not logged in\n            }\n\n            socket.socket.on('post:create_wallet', function (rippleAddress) {\n                socket.socket.removeAllListeners('post:create_wallet');\n                walletInfo.wallet = rippleAddress;\n\n                RippleAccountService.accountInfo.account = theNewuser.name;\n                RippleAccountService.accountInfo.iban = theNewuser.iban;\n\n                callback();\n            });\n\n            socket.socket.emit('create_wallet', { ownerEmail: theNewuser.email, role: theNewuser.role });\n        }\n\n        function loadCurrentUserBalance() {\n            $log.debug('loadCurrentUserBalance');\n            var user = Auth.getCurrentUser();\n\n            if (!user.email) {\n                return; // No user is logged in, please go away\n            }\n\n            socket.socket.on('post:list_transactions', function (result) {\n                if (result.status === 'success') {\n                    RippleAccountService.accountInfo.transactions = result.transactions;\n                    if (console.table) {\n                        console.log('post:list_transactions');\n                        console.table(result.transactions);\n                    }\n                }\n            });\n\n            // socket.socket.emit('account_info', user.email);\n            socket.socket.emit('list_transactions', user.email);\n        }\n\n        return {\n            getCurrentUserWallet: getCurrentUserWallet,\n            loadCurrentUserBalance: loadCurrentUserBalance,\n            walletInfo: walletInfo\n        };\n    });\n","markerStore":{"nextMarkerId":11,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":288,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"6":{"range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"7":{"range":{"start":{"row":13,"column":0},"end":{"row":14,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"8":{"range":{"start":{"row":15,"column":0},"end":{"row":16,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"9":{"range":{"start":{"row":23,"column":0},"end":{"row":25,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"10":{"range":{"start":{"row":29,"column":0},"end":{"row":30,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1af810d1b2702d4c3338fde120a457539aaad729","deserializer":"TextBuffer","version":2},{"text":"'use strict';\n\nangular.module('riwebApp')\n    .controller('MyaccountCtrl', function ($scope, $rootScope, Auth, User, Wallet,\n        RippleRemoteService, FormattingService, RipplePeersService,\n        RippleAccountService, RippleWalletService, RippleTransactionService) {\n\n        // Dismiss user message\n        if ($rootScope.message) {\n            delete $rootScope.message;\n        }\n\n        $scope.amountToTransfer = 100;\n\n        $scope.getMyAccountUser = Auth.getCurrentUser;\n        $scope.getAmountDisplayText = FormattingService.getAmountDisplayText;\n\n        $scope.transferMoney = function () {\n            RippleTransactionService.transferMoney($scope.amountToTransfer);\n        };\n\n             $scope.serverInfo = RippleRemoteService.serverInfo;\n             $scope.peersInfo = RipplePeersService.peersInfo;\n             $scope.accountInfo = RippleAccountService.accountInfo;\n        $scope.walletInfo = RippleWalletService.walletInfo;\n\n        var loadCurrentUserBalance = RippleWalletService.loadCurrentUserBalance;\n        var refreshPeers = RipplePeersService.refreshPeers;\n\n        function refreshAngular() {\n            _.defer(function () {\n                $scope.$apply();\n            });\n        }\n\n        function refreshCurrentUserWallet() {\n            RippleWalletService.getCurrentUserWallet(function () {\n                loadCurrentUserBalance(refreshAngular);\n            });\n        }\n\n        RippleAccountService.resetAccount();\n        refreshAngular();\n\n        $scope.$on('currentUser', function () {\n            refreshCurrentUserWallet();\n        });\n\n        refreshCurrentUserWallet();\n        RippleRemoteService.onRemotePresent(function (remote) {\n\n            remote.on('ledger_closed', function () {\n                refreshPeers(refreshAngular);\n                loadCurrentUserBalance(refreshAngular);\n            });\n\n            remote.on('transactions', function () {\n                loadCurrentUserBalance(refreshAngular);\n            });\n        });\n\n    });\n","markerStore":{"nextMarkerId":5,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":300,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"3":{"range":{"start":{"row":21,"column":0},"end":{"row":24,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false},"4":{"range":{"start":{"row":60,"column":0},"end":{"row":61,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7b1731e52bc55a36c18b18df269d623022a85c07","deserializer":"TextBuffer","version":2},{"text":"\nvar ripple = require('ripple-lib');\nvar Q = require('q');\n\nvar LoggedEmitterService = require('./LoggedEmitter/LoggedEmitter.service');\n\nvar debug = require('debug')('Utils');\n\nvar ROOT_RIPPLE_ACCOUNT = {\n    address : 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh',\n    secret  : 'masterpassphrase'\n};\n\nvar RIPPLED_WS_SERVER = 'ws://localhost:6006';\n\nfunction getNewRemote(){\n  var newRemote = new ripple.Remote({\n        servers: [ RIPPLED_WS_SERVER ]\n        //fee_cushion: 0.0\n    });\n\n  newRemote.on('disconect', function(){\n    console.log('remote disconect');\n  });\n\n  newRemote.on('disconected', function(){\n    console.log('remote disconected');\n  });\n\n  return newRemote;\n}\n\nfunction getNewConnectedRemote(rippleAddress, rippleSecret){\n  debug('getNewConnectedRemote', rippleAddress, rippleSecret);\n  var deferred = Q.defer();\n  var remote = getNewRemote();\n\n  if (rippleAddress && rippleSecret) {\n    remote.setSecret(rippleAddress, rippleSecret);\n  }\n\n  remote.connect(function(err){\n    debug('getNewConnectedRemote remote.connect err=', err);\n    if(!err){\n      deferred.resolve(remote);\n    } else {\n      deferred.reject(err);\n    }\n  });\n  return deferred.promise;\n}\n\nfunction getNewConnectedAdminRemote() {\n  return getNewConnectedRemote(ROOT_RIPPLE_ACCOUNT.address, ROOT_RIPPLE_ACCOUNT.secret);\n}\n\nfunction onEvent(eventName, listenerFunction) {\n    LoggedEmitterService.once(eventName, wrappedListenerFunction);\n\n    function wrappedListenerFunction() {\n        var eventObject = arguments[0];\n        listenerFunction.call(null, eventObject);\n    }\n\n    return wrappedListenerFunction;\n}\n\nfunction emitEvent(eventName, event) {\n    LoggedEmitterService.emit(eventName, event);\n}\n\nvar sockets = [];\n\nfunction putSocket(socket){\n  sockets[socket.id] = socket;\n}\n\nfunction forwardFromEventEmitterToSocket(eventName, socket) {\n    onEvent(eventName, function (event) {\n        socket.emit(eventName, event);\n    });\n}\n\nmodule.exports.putSocket = putSocket;\nmodule.exports.emitEvent = emitEvent;\nmodule.exports.onEvent = onEvent;\nmodule.exports.getNewConnectedRemote = getNewConnectedRemote;\nmodule.exports.getNewConnectedAdminRemote = getNewConnectedAdminRemote;\nmodule.exports.ROOT_RIPPLE_ACCOUNT = ROOT_RIPPLE_ACCOUNT;\nmodule.exports.forwardFromEventEmitterToSocket = forwardFromEventEmitterToSocket;\n","markerStore":{"nextMarkerId":3,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":312,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":{"start":{"row":89,"column":0},"end":{"row":90,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf-8","filePath":"/home/andrei/Dev/riweb/server/utils/utils.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b30ad5a48ab680db961cc1a7666a969aeab252e6","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":268,"softTabs":true,"displayBuffer":{"id":269,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/.tags","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":272,"softTabs":true,"displayBuffer":{"id":273,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/.tags1","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":276,"softTabs":true,"displayBuffer":{"id":277,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":288,"softTabs":true,"displayBuffer":{"id":289,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":300,"softTabs":true,"displayBuffer":{"id":301,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":312,"softTabs":true,"displayBuffer":{"id":313,"softWrapped":false,"scrollTop":1001,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/home/andrei/Dev/riweb/server/utils/utils.js","tabLength":2,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/home/andrei/Dev/riweb/server/utils/utils.js","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/home/andrei/Dev/riweb/.tags":1440531476506,"/home/andrei/Dev/riweb/.tags1":1440531476535,"/home/andrei/Dev/riweb/client/app/RipplePeersService/RipplePeersService.service.js":1440531476561,"/home/andrei/Dev/riweb/client/app/RippleWalletService/RippleWalletService.service.js":1440531476606,"/home/andrei/Dev/riweb/client/app/myaccount/myaccount.controller.js":1440531476646,"/home/andrei/Dev/riweb/server/utils/utils.js":1440531476687},"metrics":{"sessionLength":400550},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/andrei/Dev/riweb":{"isExpanded":false,"entries":{}}},"selectedPath":"/home/andrei/Dev/riweb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"symbol-gen":{},"keybinding-resolver":{},"find-and-replace":{"findOptions":{"findPattern":"","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]}}}