{
  "classes": {
    "Directory": {
      "name": "Directory",
      "filename": "src/directory.coffee",
      "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L14",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Directory Metadata",
          "description": ""
        },
        {
          "name": "Managing Paths",
          "description": ""
        },
        {
          "name": "Traversing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L27",
          "visibility": "Public",
          "summary": "Configures a new Directory instance, no files are accessed.",
          "description": "Configures a new Directory instance, no files are accessed.",
          "arguments": [
            {
              "name": "directoryPath",
              "description": "A {String} containing the absolute path to the directory",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "symlink",
              "description": "A {Boolean} indicating if the path is a symlink. (default: false) ",
              "type": "Boolean",
              "isOptional": true
            }
          ]
        },
        {
          "name": "create",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L51",
          "visibility": "Public",
          "summary": "Creates the directory on disk that corresponds to `::getPath()` if\nno such directory already exists.",
          "description": "Creates the directory on disk that corresponds to `::getPath()` if\nno such directory already exists.",
          "arguments": [
            {
              "name": "mode",
              "description": "Optional {Number} that defaults to `0777`. Returns a {Promise} that resolves once the directory is created on disk. It resolves to a boolean value that is true if the directory was created or false if it already existed. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L73",
          "visibility": "Public",
          "summary": "Invoke the given callback when the directory's contents change.",
          "description": "Invoke the given callback when the directory's contents change.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the directory's contents change.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "isFile",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L95",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always false."
            }
          ]
        },
        {
          "name": "isDirectory",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L98",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always true."
            }
          ]
        },
        {
          "name": "exists",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L102",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a promise that resolves to a {Boolean}, true if the\ndirectory exists, false otherwise."
            }
          ]
        },
        {
          "name": "existsSync",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L107",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, true if the directory exists, false otherwise."
            }
          ]
        },
        {
          "name": "isRoot",
          "sectionName": "Directory Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L112",
          "visibility": "Public",
          "summary": "Return a {Boolean}, true if this {Directory} is the root directory\nof the filesystem, or false if it isn't. ",
          "description": "Return a {Boolean}, true if this {Directory} is the root directory\nof the filesystem, or false if it isn't. "
        },
        {
          "name": "getPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L123",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nThis may include unfollowed symlinks or relative directory entries. Or it\nmay be fully resolved, it depends on what you give it. ",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the directory's {String} path."
            }
          ]
        },
        {
          "name": "getRealPathSync",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L129",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nAll relative directory entries are removed and symlinks are resolved to\ntheir final destination. ",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns this directory's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getBaseName",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L140",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} basename of the directory."
            }
          ]
        },
        {
          "name": "relativize",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L145",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the relative {String} path to the given path from this\ndirectory."
            }
          ]
        },
        {
          "name": "getParent",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L202",
          "visibility": "Public",
          "summary": "Traverse to the parent directory.",
          "description": "Traverse to the parent directory.",
          "returnValues": [
            {
              "type": "Directory",
              "description": "Returns a {Directory}."
            }
          ]
        },
        {
          "name": "getFile",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L211",
          "visibility": "Public",
          "summary": "Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.",
          "description": "Traverse within this Directory to a child File. This method doesn't\nactually check to see if the File exists, it just creates the File object.",
          "arguments": [
            {
              "name": "filename",
              "description": "The {String} name of a File within this Directory.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "File",
              "description": "Returns a {File}."
            }
          ]
        },
        {
          "name": "getSubdirectory",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L221",
          "visibility": "Public",
          "summary": "Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.",
          "description": "Traverse within this a Directory to a child Directory. This method\ndoesn't actually check to see if the Directory exists, it just creates the\nDirectory object.",
          "arguments": [
            {
              "name": "dirname",
              "description": "The {String} name of the child Directory.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Directory",
              "description": "Returns a {Directory}."
            }
          ]
        },
        {
          "name": "getEntriesSync",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L227",
          "visibility": "Public",
          "summary": "Reads file entries in this directory from disk synchronously.",
          "description": "Reads file entries in this directory from disk synchronously.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {File} and {Directory} objects."
            }
          ]
        },
        {
          "name": "getEntries",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L248",
          "visibility": "Public",
          "summary": "Reads file entries in this directory from disk asynchronously.",
          "description": "Reads file entries in this directory from disk asynchronously.",
          "arguments": [
            {
              "children": [
                {
                  "name": "error",
                  "description": "An {Error}, may be null.",
                  "type": "Error",
                  "isOptional": false
                },
                {
                  "name": "entries",
                  "description": "An {Array} of {File} and {Directory} objects. ",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to call with the following arguments:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "contains",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/directory.coffee#L279",
          "visibility": "Public",
          "summary": "Determines if the given path (real or symbolic) is inside this\ndirectory. This method does not actually check if the path exists, it just\nchecks if the path is under this directory.",
          "description": "Determines if the given path (real or symbolic) is inside this\ndirectory. This method does not actually check if the path exists, it just\nchecks if the path is under this directory.",
          "arguments": [
            {
              "name": "pathToCheck",
              "description": "The {String} path to check.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} whether the given path is inside this directory."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents a directory on disk that can be watched for changes. ",
      "description": "Represents a directory on disk that can be watched for changes. "
    },
    "File": {
      "name": "File",
      "filename": "src/file.coffee",
      "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L19",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "File Metadata",
          "description": ""
        },
        {
          "name": "Managing Paths",
          "description": ""
        },
        {
          "name": "Traversing",
          "description": ""
        },
        {
          "name": "Reading and Writing",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L32",
          "visibility": "Public",
          "summary": "Configures a new File instance, no files are accessed.",
          "description": "Configures a new File instance, no files are accessed.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} containing the absolute path to the file",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "symlink",
              "description": "A {Boolean} indicating if the path is a symlink (default: false). ",
              "type": "Boolean",
              "isOptional": false
            }
          ]
        },
        {
          "name": "create",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L54",
          "visibility": "Public",
          "summary": "Creates the file on disk that corresponds to `::getPath()` if no\nsuch file already exists.",
          "description": "Creates the file on disk that corresponds to `::getPath()` if no\nsuch file already exists.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves once the file is created on disk. It\nresolves to a boolean value that is true if the file was created or false if\nit already existed."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L72",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file's contents change.",
          "description": "Invoke the given callback when the file's contents change.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file's contents change.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidRename",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L81",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file's path changes.",
          "description": "Invoke the given callback when the file's path changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file's path changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDelete",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L90",
          "visibility": "Public",
          "summary": "Invoke the given callback when the file is deleted.",
          "description": "Invoke the given callback when the file is deleted.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the file is deleted.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowWatchError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L103",
          "visibility": "Public",
          "summary": "Invoke the given callback when there is an error with the watch.\nWhen your callback has been invoked, the file will have unsubscribed from\nthe file watches.",
          "description": "Invoke the given callback when there is an error with the watch.\nWhen your callback has been invoked, the file will have unsubscribed from\nthe file watches.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called. ",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isFile",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L125",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always true."
            }
          ]
        },
        {
          "name": "isDirectory",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L128",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, always false."
            }
          ]
        },
        {
          "name": "exists",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L132",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a promise that resolves to a {Boolean}, true if the file\nexists, false otherwise."
            }
          ]
        },
        {
          "name": "existsSync",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L137",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}, true if the file exists, false otherwise."
            }
          ]
        },
        {
          "name": "getDigest",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L143",
          "visibility": "Public",
          "summary": "Get the SHA-1 digest of this file",
          "description": "Get the SHA-1 digest of this file",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a promise that resolves to a {String}."
            }
          ]
        },
        {
          "name": "getDigestSync",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L152",
          "visibility": "Public",
          "summary": "Get the SHA-1 digest of this file",
          "description": "Get the SHA-1 digest of this file",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setEncoding",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L162",
          "visibility": "Public",
          "summary": "Sets the file's character set encoding name.",
          "description": "Sets the file's character set encoding name.",
          "arguments": [
            {
              "name": "encoding",
              "description": "The {String} encoding to use (default: 'utf8') ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getEncoding",
          "sectionName": "File Metadata",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L173",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} encoding name for this file (default: 'utf8')."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L180",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} path for the file."
            }
          ]
        },
        {
          "name": "getRealPathSync",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L187",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns this file's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getRealPath",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L196",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a promise that resolves to the file's completely resolved {String} path."
            }
          ]
        },
        {
          "name": "getBaseName",
          "sectionName": "Managing Paths",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L204",
          "visibility": "Public",
          "summary": "Return the {String} filename without any directory information. ",
          "description": "Return the {String} filename without any directory information. "
        },
        {
          "name": "getParent",
          "sectionName": "Traversing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L212",
          "visibility": "Public",
          "summary": "Return the {Directory} that contains this file. ",
          "description": "Return the {Directory} that contains this file. "
        },
        {
          "name": "read",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L248",
          "visibility": "Public",
          "summary": "Reads the contents of the file.",
          "description": "Reads the contents of the file.",
          "arguments": [
            {
              "name": "flushCache",
              "description": "A {Boolean} indicating whether to require a direct read or if a cached copy is acceptable.",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a promise that resovles to a String."
            }
          ]
        },
        {
          "name": "write",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L286",
          "visibility": "Public",
          "summary": "Overwrites the file with the given text.",
          "description": "Overwrites the file with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} text to write to the underlying file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves when the file has been written."
            }
          ]
        },
        {
          "name": "writeSync",
          "sectionName": "Reading and Writing",
          "srcUrl": "https://github.com/atom/node-pathwatcher/blob/v4.4.3/src/file.coffee#L298",
          "visibility": "Public",
          "summary": "Overwrites the file with the given text.",
          "description": "Overwrites the file with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} text to write to the underlying file.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns ."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents an individual file that can be watched, read from, and\nwritten to. ",
      "description": "Represents an individual file that can be watched, read from, and\nwritten to. "
    }
  }
}