{
  "name": "tern-lint",
  "license": "MIT",
  "version": "0.4.0",
  "main": "lint.js",
  "bin": {
    "tern-lint": "./bin/lint"
  },
  "author": {
    "name": "Angelo ZERR",
    "email": "angelo.zerr@gmail.com"
  },
  "description": "Tern plugin to validate JavaScripts files to collect semantic errors.",
  "repository": {
    "type": "git",
    "url": "git://github.com/angelozerr/tern-lint.git"
  },
  "scripts": {
    "test": "node ./test/all.js"
  },
  "dependencies": {
    "tern": ">=0.13.0",
    "acorn": "^2.3.0",
    "glob": "3",
    "minimatch": "0.2"
  },
  "devDependencies": {
    "test": ">=0.0.5"
  },
  "gitHead": "ea53d2ebe0ac44a100296d5b4da390e22f17da83",
  "readme": "tern-lint\n=========\n\n[![Build Status](https://secure.travis-ci.org/angelozerr/tern-lint.png)](http://travis-ci.org/angelozerr/tern-lint)\n[![NPM version](https://img.shields.io/npm/v/tern-lint.svg)](https://www.npmjs.org/package/tern-lint)  \n\n[tern-lint](https://github.com/angelozerr/tern-lint) is a tern plugin which is able to validate JavaScripts files to collect **semantic errors**. It is **static type checker** like [flow](http://flowtype.org/). It's the main difference with other famous linters like [JSHint](http://jshint.com/), [ESLint](http://eslint.org/), [JSCS ](http://jscs.info/) which validate JavaScript files to collect **syntax errors**.\n\nWhat do you mean with semantic errors? Invalid argument is a sample of semantic error :\n\n![Invalid Argument](https://github.com/angelozerr/tern-lint/wiki/images/CodeMirrorAddon_InvalidArgument.png)\n\nSee [Validation rules](https://github.com/angelozerr/tern-lint/wiki/Validation-Rules) for more informations.\n\n[tern-lint](https://github.com/angelozerr/tern-lint) is able to use JSDoc annotations for the validation : \n\n![Type mismatch by using JSDoc](https://github.com/angelozerr/tern-lint/wiki/images/CodeMirrorAddon_TypeMismatchByUsingJSDoc.png)\n\nSee [Validation with JSDoc](https://github.com/angelozerr/tern-lint/wiki/Validation-JSDoc) for more informations.\n \n[tern-lint](https://github.com/angelozerr/tern-lint) provides :\n\n * the tern lint plugin `lint.js` to validate JavaScript files.\n * the CodeMirror lint addon `tern-lint.js` which uses tern lint plugin `lint.js`\n * the `bin/lint` to use tern lint with command line.\n \n# Usage\n\n[tern-lint](https://github.com/angelozerr/tern-lint) can be used :\n\n * with a [JavaScript editor](https://github.com/angelozerr/tern-lint/wiki/Editors) if the editor supports it. \n * with [Command line](https://github.com/angelozerr/tern-lint/wiki/Command-Line). \n\nSee [Usage](https://github.com/angelozerr/tern-lint/wiki/Home) for more informations.\n\n## Editors\n\nToday several JavaScript editors supports [tern-lint](https://github.com/angelozerr/tern-lint) : \n\n### CodeMirror : \n\nHere a screenshot with tern lint and CodeMirror :\n\n![CodeMirror & TernLint](https://github.com/angelozerr/tern-lint/wiki/images/CodeMirrorAddon_TernLintOverview.png)\n\n### Eclipse :\n\nIf you are Eclipse user, you can use the tern lint.js too. See [Tern IDE & Validation](https://github.com/angelozerr/tern.java/wiki/Tern-Linter-Lint)\n\n![Eclipse & TernLint](https://github.com/angelozerr/tern-lint/wiki/images/EclipseIDE_TernLintOverview.png)\n\n### Emacs \n\n![Emacs & TernLint](https://camo.githubusercontent.com/a0aee78d66237ddc65e4ab1291ccbb496f52fd25/687474703a2f2f692e696d6775722e636f6d2f723335615244512e706e67)\n\nSee [tern-lint.el](https://github.com/katspaugh/tern-lint.el) for more information.\n\n### Atom\n\n![Atom & TernLint]\n(https://camo.githubusercontent.com/2f6791e4df4362cdbaf3f3fff17db1af63f24314/687474703a2f2f7777772e746f626961732d73636875626572742e636f6d2f6769746875622f6769746875622d7465726e2d6c696e742e706e67)\n\nSee [atom-ternjs](https://github.com/tststs/atom-ternjs) for more information.\n\n### Other editors\n\nIf you wish to integrate the tern lint with an editor (Vim, Sublime, etc), here the **JSON request** to post to the tern server : \n\n```json\n{\n \"query\": {\n  \"type\": \"lint\",\n  \"file\": \"test.js\",\n  \"files\": [\n   {\n    \"name\": \"test.js\",\n    \"text\": \"var elt = document.getElementByIdXXX('myId');\",\n    \"type\": \"full\"\n   }\n  ]\n }\n}\n```\n\t\nand the **JSON response** of the tern server : \t\n\n```json\n{\n \"messages\": [\n  {\n   \"message\": \"Unknow property 'getElementByIdXXX'\",\n   \"from\": 19,\n   \"to\": 36,\n   \"severity\": \"warning\"\n  }\n ]\n}\n```\n\n## Command line\n\nInstall tern-lint with npm like this :\n\n```\n$ npm install -g tern-lint\n```\n\nGo at in your folder which contains your JavaScripts files to validate :\n\n```\n$ cd your/folder/which/contains/javascript/files\n```\n\nExecute the lint :\n\n```\n$ lint --format\n```\n\nThe shell window should display errors like this :\n\n```json\n{\n \"messages\": [\n  {\n   \"message\": \"Unknow property 'getElementByIdXXX'\",\n   \"from\": 19,\n   \"to\": 36,\n   \"severity\": \"warning\"\n  }\n ]\n}\n```\n\nSee [Command Line](https://github.com/angelozerr/tern-lint/wiki/Command-Line) for more informations.\n\t\n# Validation rules\n\n## Native\n\ntern lint validate JS files but not syntax errors, it manages those validation rules : \n\n * `unknown property`. (ex : document.getElementByIdXXX  where getElementByIdXXX is an unknown property of document)\n * `unknown identifier`. (ex : a = '' where a is an unknown identifier)\n * `not a function` (ex : var a = []; a.length() is not valid because length of array is not a function)\n * `invalid argument` (ex : document.getElementById(1000) is not valid because 1000 is a number and not a string)\n  \nSee [Validation rules](https://github.com/angelozerr/tern-lint/wiki/Validation-Rules) for more informations.\n\n## Custom\n\nYou can develop a custom lint to validate anything. Here a list of tern plugin which provides custom lint : \n\n * [YUI3](https://github.com/angelozerr/tern-aui2.0.x/wiki/Features#yui-use-module) to validate YUI3 modules.\n * [Node Extension](https://github.com/angelozerr/tern-node-extension) to validate required modules.\n * [RequireJS Extension](https://github.com/angelozerr/tern-requirejs-extension) to validate required modules.\n * [Browser Extension](https://github.com/angelozerr/tern-browser-extension) to validate syntax of CSS selectors, elements IDS.\n * [jQuery Extension](https://github.com/angelozerr/tern-jquery-extension) to validate syntax of CSS selectors, elements IDS.\n * [Tabris](https://github.com/angelozerr/tern-tabris) to validate tabris action.\n   \n# Structure\n\nThe basic structure of the project is given in the following way:\n\n* `bin/` contains the lint command to use tern-lint with command line. \n* `codemirror/` contains the CodeMirror lint addon `tern-lint.js`, which is an implementation of CodeMirror lint addon with tern-lint.\n* `demos/` demos with tern lint plugin which use CodeMirror.\n* `lint.js` the tern lint plugin.\n* `test/` contains test of tern lint plugin.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/angelozerr/tern-lint/issues"
  },
  "homepage": "https://github.com/angelozerr/tern-lint",
  "_id": "tern-lint@0.4.0",
  "_shasum": "b8089fa022ad6bd1d7338a86adf7574e39635c3d",
  "_from": "../npm-10444-c73ffd20/git-cache-22c16d56daa3/ea53d2ebe0ac44a100296d5b4da390e22f17da83",
  "_resolved": "git+https://github.com/angelozerr/tern-lint.git#ea53d2ebe0ac44a100296d5b4da390e22f17da83"
}
