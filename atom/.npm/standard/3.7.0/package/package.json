{"name":"standard","description":"JavaScript Standard Style","version":"3.7.0","author":{"name":"Feross Aboukhadijeh","email":"feross@feross.org","url":"http://feross.org/"},"bin":{"standard":"./bin/cmd.js"},"bugs":{"url":"https://github.com/feross/standard/issues"},"dependencies":{"dezalgo":"^1.0.1","eslint":"^0.18.0","eslint-plugin-react":"^2.1.0","find-root":"^0.1.1","get-stdin":"^4.0.1","glob":"^5.0.0","minimist":"^1.1.0","run-parallel":"^1.0.0","standard-format":"^1.3.3","uniq":"^1.0.1"},"devDependencies":{"mkdirp":"^0.5.0","rimraf":"^2.2.8","run-series":"^1.0.2","tape":"^4.0.0","xtend":"^4.0.0"},"homepage":"https://github.com/feross/standard","keywords":["standard","style checker","code style","code checker","code linter","style linter","simple","policy","style","code","lint","eslint","jshint","jscs","hint","enforce","check","verify","quality","checker","code standards","JavaScript Standard Style","standard style"],"license":"MIT","main":"index.js","preferGlobal":true,"repository":{"type":"git","url":"git://github.com/feross/standard.git"},"scripts":{"test":"node ./bin/cmd.js && tape test/*.js"},"standard":{"ignore":"tmp/"},"readme":"# JavaScript Standard Style\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n\n[travis-image]: https://img.shields.io/travis/feross/standard.svg?style=flat\n[travis-url]: https://travis-ci.org/feross/standard\n[npm-image]: https://img.shields.io/npm/v/standard.svg?style=flat\n[npm-url]: https://npmjs.org/package/standard\n[downloads-image]: https://img.shields.io/npm/dm/standard.svg?style=flat\n[downloads-url]: https://npmjs.org/package/standard\n\n### One Style to Rule Them All\n\nNo decisions to make. No `.eslintrc`, `.jshintrc`, or `.jscsrc` files to manage. It just\nworks.\n\nThis module saves you (and others!) time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your\n  module/project. Just drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\n## Install\n\n```bash\nnpm install standard\n```\n\n## Rules\n\n- **2 spaces** – for indentation\n- **Single quotes for strings** – except to avoid escaping\n- **No unused variables** – this one catches *tons* of bugs!\n- **No semicolons** – [It's][1] [fine.][2] [Really!][3]\n- **Never start a line with `(` or `[`**\n    - This is the **only** gotcha with omitting semicolons – *automatically checked for you!*\n    - [More details][4]\n- **Space after keywords** `if (condition) { ... }`\n- **Space after function name** `function name (arg) { ... }`\n- Name the context variable `self` – `var self = this`\n  - Accidental [`window.self`][5] usage is dissallowed (happens when `var self = this` is\n    omitted)\n- Always use `===` instead of `==` – but `obj == null` is allowed to check `null || undefined`.\n- Always handle the node.js `err` function parameter\n- Always prefix browser globals with `window` – except `document` and `navigator` are okay\n  - Prevents accidental use of poorly-named browser globals like `open`, `length`,\n    `event`, and `name`.\n- **And [more goodness][6]** – *give `standard` a try today!*\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://github.com/maxogden/messages/issues/18\n[4]: RULES.md#automatic-semicolon-insertion-asi\n[5]: https://developer.mozilla.org/en-US/docs/Web/API/Window.self\n[6]: RULES.md#javascript-standard-style\n\nTo get a better idea, take a look at\n[a sample file](https://github.com/feross/bittorrent-dht/blob/master/client.js) written\nin JavaScript Standard Style, or check out some of\n[the repositories](https://github.com/feross/standard/blob/master/test/clone.js) that use\n`standard`.\n\n## Badge\n\nUse this in one of your projects? Include one of these badges in your readme to\nlet people know that your code is using the standard style.\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n```markdown\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n```\n\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n```markdown\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n```\n\n## Usage\n\nThe easiest way to use JavaScript Standard Style to check your code is to install it\nglobally as a Node command line program. To do so, simply run the following command in\nyour terminal (flag `-g` installs `standard` globally on your system, omit it if you want\nto install in the current working directory):\n\n```bash\nnpm install standard -g\n```\n\nAfter you've done that you should be able to use the `standard` program. The simplest use\ncase would be checking the style of all JavaScript files in the current working directory:\n\n```\n$ standard\nError: Use JavaScript Standard Style\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\n### Editor plugins\n\nFirst, install `standard`. Then, install the appropriate plugin for your editor:\n\n- **[Vim](https://github.com/scrooloose/syntastic)** - Install\n  [Syntastic](https://github.com/scrooloose/syntastic) and add\n  `let g:syntastic_javascript_checkers = ['standard']` to your `.vimrc`.\n- **[Sublime Text](https://github.com/Flet/Sublimelinter-contrib-standard)** - Install\n  [Package Control](https://packagecontrol.io/),\n  [SublimeLinter](http://www.sublimelinter.com/en/latest/), and\n  [SublimeLinter-contrib-standard](https://github.com/Flet/Sublimelinter-contrib-standard).\n- **[Atom](https://atom.io)** - Install [Linter](https://github.com/AtomLinter/Linter)\n  and [linter-js-standard](https://github.com/ricardofbarros/linter-js-standard).\n\n### What you might do if you're clever\n\n1. Add it to `package.json`\n\n  ```json\n  {\n    \"name\": \"my-cool-package\",\n    \"devDependencies\": {\n      \"standard\": \"^3.0.0\"\n    },\n    \"scripts\": {\n      \"test\": \"standard && node my-tests.js\"\n    }\n  }\n  ```\n\n2. Check style automatically when you run `npm test`\n\n  ```\n  $ npm test\n  Error: Use JavaScript Standard Style\n    lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n  ```\n\n3. Never give style feedback on a pull request again!\n\n## FAQ\n\n### Why would I use JavaScript Standard Style?\n\nThe beauty of JavaScript Standard Style is that it's simple. No one wants to maintain\nmultiple hundred-line style configuration files for every module/project they work on.\nEnough of this madness!\n\nThis module saves you time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your\n  module/project. Just drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\nAdopting `standard` style means ranking the importance of code clarity and community\nconventions higher than personal style. This might not make sense for 100% of projects and\ndevelopment cultures, however open source can be a hostile place for newbies. Setting up\nclear, automated contributor expectations makes a project healthier.\n\n### I disagree with rule X, can you change it?\n\nNo. The the whole point of `standard` is to avoid [bikeshedding][bikeshedding] about\nstyle. There are lots of debates online about tabs vs. spaces, etc. that will never be\nresolved. These debates just distract from getting stuff done. At the end of the day you\nhave to 'just pick something', and that's the whole philosophy of `standard` -- its a\nbunch of sensible 'just pick something' opinions. Hopefully, users see the value in that\nover defending their own opinions.\n\n[bikeshedding]: https://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#idp60694736\n\n### But this isn't a real web standard!\n\nOf course it's not! The style laid out here is not affiliated with any official web\nstandards groups, which is why this repo is called `feross/standard` and not\n`ECMA/standard`.\n\nThe word \"standard\" has more meanings than just \"web standard\" :-) For example:\n\n- This module helps hold our code to a high *standard of quality*.\n- This module ensures that new contributors follow some basic *style standards*.\n\n### Is there an automatic formatter?\n\nYes! Just run `standard --format filename.js`. This uses\n[Max Ogden][max]'s automatic formatter\n[`standard-format`][standard-format], which can automatically\nfix most code issues.\n\nWhile most issues can be fixed, some, like not handling errors in node-style callbacks,\nmust be fixed manually.\n\n[max]: https://github.com/maxogden\n[standard-format]: https://github.com/maxogden/standard-format\n\n### How do I ignore files?\n\nThe paths `node_modules/**`, `*.min.js`, `bundle.js`, `coverage/**`, and hidden\nfiles/folders (beginning with `.`) are automatically excluded when looking for `.js` files\nto style check.\n\nSometimes you need to ignore additional folders or specific minfied files. To do that, add\na `standard.ignore` property to `package.json`:\n\n```json\n\"standard\": {\n  \"ignore\": [\n    \"**/out/**\",\n    \"**/lib/select2/**\",\n    \"**/lib/ckeditor/**\"\n  ]\n}\n```\n\n### How do I hide a certain warning?\n\nIn rare cases, you'll need to break a rule and hide the warning generated by `standard`.\n\nJavaScript Standard Style uses [`eslint`](http://eslint.org/) under-the-hood and you can\nhide warnings as you normally would if you used `eslint` directly.\n\nTo get verbose output (so you can find the particular rule name to ignore), run:\n\n```bash\n$ standard --verbose\nError: Use JavaScript Standard Style\n  routes/error.js:20:36: 'file' was used before it was defined. (no-use-before-define)\n```\n\nDisable **all rules** on a specific line:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line\n```\n\nOr, disable **only** the `\"no-use-before-define\"` rule:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line no-use-before-define\n```\n\nOr, disable the `\"no-use-before-define\"` rule for **multiple lines**:\n\n```js\n/*eslint-disable no-use-before-define */\n// offending code here...\n// offending code here...\n// offending code here...\n/*eslint-enable no-use-before-define */\n```\n\n### Can you make rule X configurable?\n\nNo. Use `eslint` directly if you want to configure hundreds of options individually.\n\nPro tip: Just use `standard` and move on. There are actual real problems that you could\nspend your time solving! :P\n\n### What about Web Workers?\n\nWeb workers have a magic global variable called `self`. In regular JS files, `standard`\nwon't let you use `self` directly, as it wants to prevent accidental use of\n`window.self`. But `standard` has no way of knowing when you are in a `worker` and\ntherefore does not know when to allow usage of `self` directly.\n\nUntil we figure out a better solution, we recommend adding this to the top of workers:\n\n```\n/* global self */\n```\n\nThis lets `standard` (as well as humans reading your code) know that `self` is a global\nin web worker code.\n\n### Is there a Git `pre-commit` hook for `standard`?\n\nFunny you should ask!\n\n```sh\n#!/bin/sh\n# Ensure all javascript files staged for commit pass standard code style\ngit diff --name-only --cached --relative | grep '\\.js$' | xargs standard\nexit $?\n```\n\nAlternatively, [overcommit](https://github.com/brigade/overcommit) is a Git hook\nmanager that includes support for running `standard` as a Git pre-commit hook.\nTo enable this, add the following to your `.overcommit.yml` file:\n\n```yaml\nPreCommit:\n  Standard:\n    enabled: true\n```\n\n## License\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n","readmeFilename":"README.md","_id":"standard@3.7.0","_shasum":"703aa67ee4327ea77c85808358826a530c6557e5","_resolved":"https://registry.npmjs.org/standard/-/standard-3.7.0.tgz","_from":"https://registry.npmjs.org/standard/-/standard-3.7.0.tgz"}