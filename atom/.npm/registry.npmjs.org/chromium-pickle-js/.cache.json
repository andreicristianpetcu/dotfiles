{"_id":"chromium-pickle-js","_rev":"1-e6b9eee13dd70c43efe4ca21370ae959","name":"chromium-pickle-js","description":"Binary value packing and unpacking","dist-tags":{"latest":"0.1.0"},"versions":{"0.1.0":{"main":"./lib/exports.js","name":"chromium-pickle-js","description":"Binary value packing and unpacking","version":"0.1.0","licenses":[{"type":"MIT","url":"http://github.com/atom/node-chromium-pickle-js/raw/master/LICENSE"}],"repository":{"type":"git","url":"https://github.com/atom/node-chromium-pickle-js.git"},"bugs":{"url":"https://github.com/atom/node-chromium-pickle-js/issues"},"scripts":{"prepublish":"grunt coffee"},"devDependencies":{"grunt":"~0.4.1","grunt-coffeelint":"0.0.6","grunt-contrib-coffee":"~0.6.6","grunt-cli":"~0.1.7","coffee-script":"~1.6.2","rimraf":"~2.1.4"},"dependencies":{},"gitHead":"b015a1b2faf0ae56f08665794044d41f61e63f56","homepage":"https://github.com/atom/node-chromium-pickle-js","_id":"chromium-pickle-js@0.1.0","_shasum":"1d48b107d82126a2f3e211c2ea25f803ba551b21","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"zcbenz","email":"zcbenz@gmail.com"},"maintainers":[{"name":"zcbenz","email":"zcbenz@gmail.com"}],"dist":{"shasum":"1d48b107d82126a2f3e211c2ea25f803ba551b21","tarball":"http://registry.npmjs.org/chromium-pickle-js/-/chromium-pickle-js-0.1.0.tgz"},"directories":{}}},"readme":"# chromium-pickle-js\n\nThis module ports Chromium's `Pickle` class to Node, see `Pickle`'s header for\nintroduction:\n\n> This class provides facilities for basic binary value packing and unpacking.\n>\n> The Pickle class supports appending primitive values (ints, strings, etc.)\n> to a pickle instance.  The Pickle instance grows its internal memory buffer\n> dynamically to hold the sequence of primitive values.   The internal memory\n> buffer is exposed as the \"data\" of the Pickle.  This \"data\" can be passed\n> to a Pickle object to initialize it for reading.\n>\n> When reading from a Pickle object, it is important for the consumer to know\n> what value types to read and in what order to read them as the Pickle does\n> not keep track of the type of data written to it.\n>\n> The Pickle's data has a header which contains the size of the Pickle's\n> payload.  It can optionally support additional space in the header.  That\n> space is controlled by the header_size parameter passed to the Pickle\n> constructor.\n\n## Install\n\n```bash\n$ npm install chromium-pickle-js\n```\n\n## Usage\n\n### createEmpty()\n\nReturns an empty `Pickle` object.\n\n### createFromBuffer(buffer)\n\n* `buffer` Buffer\n\nReturns a `Pickle` object that initialized from a `buffer`. The data is not\ncopied so you have to ensure the `buffer` lives when using the Pickle object,\nand you should never modify the Pickle object created this way.\n\n### Pickle.createIterator()\n\nReturns a `PickleIterator` object that can be used to read data from this\n`Pickle` object.\n\n### Pickle.toBuffer()\n\nReturns a `Buffer` object that contains this `Pickle` object's data.\n\n### Pickle.writeBool(value)\n\nWrites `value` to `Pickle` object as `bool`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeInt(value)\n\nWrites `value` to `Pickle` object as `int`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeUInt32(value)\n\nWrites `value` to `Pickle` object as `uint32`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeInt64(value)\n\nWrites `value` to `Pickle` object as `int64`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeUInt64(value)\n\nWrites `value` to `Pickle` object as `uint64`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeFloat(value)\n\nWrites `value` to `Pickle` object as `float`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeDouble(value)\n\nWrites `value` to `Pickle` object as `Double`. Returns `true` when succeeded and\nreturns `false` when failed.\n\n### Pickle.writeString(str)\n\n* `str` String\n\nWrites `str` to `Pickle` object. Returns `true` when succeeded and returns\n`false` when failed.\n\n### PickleIterator.readBool()\n\nReturns current value as `bool` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readInt()\n\nReturns current value as `int` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readUInt32()\n\nReturns current value as `uint32` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readInt64()\n\nReturns current value as `int64` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readUInt64()\n\nReturns current value as `uint64` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readFloat()\n\nReturns current value as `float` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readDouble()\n\nReturns current value as `double` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n\n### PickleIterator.readString()\n\nReturns current value as `String` and seeks to next data. A`TypeError` exception\nwould be thrown when failed.\n","maintainers":[{"name":"zcbenz","email":"zcbenz@gmail.com"}],"time":{"modified":"2015-04-24T04:13:25.174Z","created":"2015-04-24T04:13:25.174Z","0.1.0":"2015-04-24T04:13:25.174Z"},"homepage":"https://github.com/atom/node-chromium-pickle-js","repository":{"type":"git","url":"https://github.com/atom/node-chromium-pickle-js.git"},"bugs":{"url":"https://github.com/atom/node-chromium-pickle-js/issues"},"readmeFilename":"README.md","_attachments":{},"_etag":"\"BHN3JKGGY3FNZT8B04N3K1LZA\""}